{"version":3,"file":"src_services_CredentialManager_js.bundle.js","mappings":";;;;;;;;AAAA;AACA,MAAMA,YAAY,GAAGC,mBAAO,CAAC,mDAAiB,CAAC;AAC/C,MAAM;EAAEC;AAAuB,CAAC,GAAGD,mBAAO,CAAC,sEAA6B,CAAC;AACzE,MAAME,aAAa,GAAGF,mBAAO,CAAC,kEAA2B,CAAC;AAC1D,MAAMG,MAAM,GAAGH,2EAA+B;;AAE9C;AACA;AACA;AACA,MAAMK,cAAc,SAASN,YAAY,CAAC;EACxCO,WAAWA,CAACC,UAAU,EAAE;IACtB,KAAK,CAAC,CAAC;IACP,IAAI,CAACA,UAAU,GAAGA,UAAU;IAC5B;IACA,IAAI,CAACJ,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACK,WAAW,GAAG,IAAI;IACvB,IAAI,CAACC,MAAM,GAAG,IAAI;EACpB;EAEA,MAAMC,UAAUA,CAACF,WAAW,EAAE;IAC5B,IAAI,CAACA,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,MAAM,GAAG,MAAMP,aAAa,CAACS,oBAAoB,CAAC,IAAI,CAACJ,UAAU,CAAC;IACvE;IACA,IAAI,CAACJ,MAAM,CAACS,IAAI,CAAC,IAAI,IAAI,CAACL,UAAU,2BAA2B,CAAC;EAClE;EAEA,MAAMM,cAAcA,CAACC,aAAa,EAAE;IAClC,MAAM;MAAEC,MAAM;MAAEC,cAAc;MAAEC,gBAAgB;MAAEC,OAAO;MAAEC;IAAY,CAAC,GAAGL,aAAa;IACxF,MAAM;MAAEM;IAAO,CAAC,GAAG,IAAI,CAACZ,WAAW;IACnC,MAAMa,KAAK,GAAGL,cAAc,EAAEK,KAAK;IAEnC,IAAI;MACF,IAAI,CAACP,aAAa,IAAI,CAACE,cAAc,IAAI,CAACD,MAAM,IAAI,CAACG,OAAO,EAAE;QAC5D,MAAM,IAAII,KAAK,CAAC,IAAI,IAAI,CAACf,UAAU,mEAAmE,CAAC;MACzG;MACA,IAAI,CAACa,MAAM,EAAE;QACX,MAAM,IAAIE,KAAK,CAAC,IAAI,IAAI,CAACf,UAAU,2CAA2C,CAAC;MACjF;MAEA,MAAMgB,gBAAgB,GAAG,IAAI,CAACC,uBAAuB,CAACT,MAAM,EAAEE,gBAAgB,CAAC;MAC/E;MACA,IAAI,CAACd,MAAM,CAACS,IAAI,CAAC,IAAI,IAAI,CAACL,UAAU,kCAAkCc,KAAK,QAAQJ,gBAAgB,GAAG,WAAW,GAAG,KAAK,WAAW,CAAC;MACrI,MAAMQ,YAAY,GAAG,MAAM,IAAI,CAACC,gBAAgB,CAACH,gBAAgB,EAAEP,cAAc,EAAEI,MAAM,CAAC;MAC1F,MAAM,IAAI,CAACO,wBAAwB,CAACF,YAAY,EAAEP,OAAO,EAAEC,WAAW,EAAEE,KAAK,CAAC;;MAE9E;MACA,IAAI,CAAClB,MAAM,CAACS,IAAI,CAAC,IAAI,IAAI,CAACL,UAAU,iCAAiCc,KAAK,aAAa,CAAC;MACxF,OAAO;QAAEO,OAAO,EAAE,IAAI;QAAEP,KAAK,EAAEA;MAAM,CAAC;IAExC,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACd;MACA,IAAI,CAAC1B,MAAM,CAAC0B,KAAK,CAAC,IAAI,IAAI,CAACtB,UAAU,sDAAsDc,KAAK,GAAG,EAAEQ,KAAK,CAAC;MAC3G,IAAIX,OAAO,IAAI,OAAOA,OAAO,KAAK,UAAU,EAAE;QAC5CA,OAAO,CAAC;UACNY,IAAI,EAAE,IAAI;UACVD,KAAK,EAAE,4BAA4BA,KAAK,CAACE,OAAO,EAAE;UAClDV,KAAK,EAAEA,KAAK,IAAI;QAClB,CAAC,CAAC;MACJ;MACA,OAAO;QACLO,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE,4BAA4BA,KAAK,CAACE,OAAO,EAAE;QAClDV,KAAK,EAAEA,KAAK,IAAI;MAClB,CAAC;IACH;EACF;EAEAG,uBAAuBA,CAACT,MAAM,EAAEE,gBAAgB,EAAE;IAChD,IAAI,OAAOA,gBAAgB,KAAK,QAAQ,IAAIA,gBAAgB,CAACe,IAAI,CAAC,CAAC,CAACC,MAAM,GAAG,CAAC,EAAE;MAC9E,OAAO,kBAAkBlB,MAAM,0BAA0BE,gBAAgB,EAAE;IAC7E,CAAC,MAAM;MACL,OAAOF,MAAM;IACf;EACF;EAEA,MAAMmB,mBAAmBA,CAAA,EAAG;IAC1B,IAAI;MACF,MAAM;QAAEd;MAAO,CAAC,GAAG,IAAI,CAACZ,WAAW;MACnC,IAAI,CAACY,MAAM,EAAE;QACX,IAAI,CAACjB,MAAM,CAACgC,IAAI,CAAC,IAAI,IAAI,CAAC5B,UAAU,sCAAsC,CAAC;QAC3E,OAAO,KAAK;MACd;MACA,MAAM6B,OAAO,GAAG,MAAM,IAAI,CAACC,eAAe,CAACjB,MAAM,CAAC;MAClD,OAAOgB,OAAO;IAChB,CAAC,CAAC,OAAOP,KAAK,EAAE;MACd,IAAI,CAAC1B,MAAM,CAAC0B,KAAK,CAAC,IAAI,IAAI,CAACtB,UAAU,iCAAiC,EAAEsB,KAAK,CAAC;MAC9E,OAAO,KAAK;IACd;EACF;EAEA,MAAMQ,eAAeA,CAACjB,MAAM,EAAE;IAC5B,IAAI;MACF,MAAMkB,YAAY,GAAG,IAAI,CAAC7B,MAAM,EAAE6B,YAAY;MAC9C,IAAI,CAACA,YAAY,EAAE;QACjB,IAAI,CAACnC,MAAM,CAACgC,IAAI,CAAC,IAAI,IAAI,CAAC5B,UAAU,2CAA2C,CAAC;QAChF,OAAO,KAAK;MACd;MACA,OAAO,MAAM,IAAI,CAACgC,kBAAkB,CAACnB,MAAM,EAAEkB,YAAY,CAAC;IAC5D,CAAC,CAAC,OAAOT,KAAK,EAAE;MACd,IAAI,CAAC1B,MAAM,CAAC0B,KAAK,CAAC,IAAI,IAAI,CAACtB,UAAU,6BAA6B,EAAEsB,KAAK,CAAC;MAC1E,OAAO,KAAK;IACd;EACF;EAEA,MAAMU,kBAAkBA,CAACnB,MAAM,EAAEC,KAAK,EAAE;IACtC,IAAI;MACF,IAAI,CAAClB,MAAM,CAACS,IAAI,CAAC,IAAI,IAAI,CAACL,UAAU,6CAA6Cc,KAAK,KAAK,CAAC;MAC5F,MAAMI,YAAY,GAAG,MAAM,IAAI,CAACe,uBAAuB,CAACpB,MAAM,EAAEC,KAAK,CAAC;MACtE,MAAMoB,QAAQ,GAAG,MAAMC,KAAK,CAACjB,YAAY,CAACkB,GAAG,EAAE;QAC7CC,MAAM,EAAEnB,YAAY,CAACmB,MAAM;QAC3BC,OAAO,EAAEpB,YAAY,CAACoB,OAAO;QAC7BC,IAAI,EAAErB,YAAY,CAACqB;MACrB,CAAC,CAAC;MAEF,IAAIL,QAAQ,CAACM,EAAE,EAAE;QACf,IAAI,CAAC5C,MAAM,CAACS,IAAI,CAAC,IAAI,IAAI,CAACL,UAAU,6CAA6Cc,KAAK,aAAaoB,QAAQ,CAACO,MAAM,GAAG,CAAC;QACtH,OAAO,IAAI;MACb,CAAC,MAAM;QACL,MAAMC,YAAY,GAAG,MAAMhD,sBAAsB,CAACwC,QAAQ,CAAC;QAC3D,IAAI,CAACtC,MAAM,CAACgC,IAAI,CAAC,IAAI,IAAI,CAAC5B,UAAU,yCAAyCc,KAAK,aAAaoB,QAAQ,CAACO,MAAM,MAAMC,YAAY,EAAE,CAAC;QACnI,OAAO,KAAK;MACd;IACF,CAAC,CAAC,OAAOpB,KAAK,EAAE;MACd,IAAI,CAAC1B,MAAM,CAAC0B,KAAK,CAAC,IAAI,IAAI,CAACtB,UAAU,wCAAwCc,KAAK,GAAG,EAAEQ,KAAK,CAAC;MAC7F,OAAO,KAAK;IACd;EACF;EAEA,MAAMW,uBAAuBA,CAACpB,MAAM,EAAEC,KAAK,EAAE;IAC3C,MAAM,IAAIC,KAAK,CAAC,2DAA2D,CAAC;EAC9E;EAEA,MAAMI,gBAAgBA,CAACX,MAAM,EAAEmC,MAAM,EAAE9B,MAAM,EAAE;IAC7C,MAAM,IAAIE,KAAK,CAAC,oDAAoD,CAAC;EACvE;EAEA6B,iBAAiBA,CAACC,IAAI,EAAE;IACtB,MAAM,IAAI9B,KAAK,CAAC,qDAAqD,CAAC;EACxE;EAEA+B,iBAAiBA,CAAA,EAAG;IAClB;EAAA;;EAGF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,kBAAkBA,CAACC,YAAY,EAAErC,OAAO,EAAEG,KAAK,EAAEmC,kBAAkB,EAAE;IACnE,IAAID,YAAY,CAACE,IAAI,KAAK,SAAS,EAAE;MACnC,IAAIC,KAAK,CAACC,OAAO,CAACJ,YAAY,CAACK,MAAM,CAAC,EAAE;QACtC,KAAK,MAAMC,QAAQ,IAAIN,YAAY,CAACK,MAAM,EAAE;UAC1C,IAAIC,QAAQ,IAAIA,QAAQ,CAAC5B,MAAM,GAAG,CAAC,EAAE;YACnCuB,kBAAkB,IAAIK,QAAQ;YAC9B3C,OAAO,CAAC;cAAE4C,KAAK,EAAED,QAAQ;cAAE/B,IAAI,EAAE,KAAK;cAAET;YAAM,CAAC,CAAC;UAClD;QACF;MACF,CAAC,MAAM,IAAIkC,YAAY,CAACO,KAAK,EAAE;QAC7B;QACAN,kBAAkB,IAAID,YAAY,CAACO,KAAK;QACxC5C,OAAO,CAAC;UAAE4C,KAAK,EAAEP,YAAY,CAACO,KAAK;UAAEhC,IAAI,EAAE,KAAK;UAAET;QAAM,CAAC,CAAC;MAC5D;IACF;IACA,OAAOmC,kBAAkB;EAC3B;EAGA,MAAM7B,wBAAwBA,CAACF,YAAY,EAAEP,OAAO,EAAEC,WAAW,EAAEE,KAAK,EAAE;IACxE,IAAI0C,MAAM;IACV,IAAIP,kBAAkB,GAAG,EAAE;IAC3B,MAAMQ,OAAO,GAAG,IAAIC,WAAW,CAAC,OAAO,CAAC;IACxC,IAAIC,MAAM,GAAG,EAAE,CAAC,CAAC;;IAEjB,IAAI,OAAO,IAAI,CAACb,iBAAiB,KAAK,UAAU,EAAE;MAChD;MACA,IAAI,CAAClD,MAAM,CAACS,IAAI,CAAC,IAAI,IAAI,CAACL,UAAU,0BAA0B,CAAC;MAC/D,IAAI,CAAC8C,iBAAiB,CAAC,CAAC;IAC1B;IAEA,IAAI;MACF;MACA,IAAI,CAAClD,MAAM,CAACS,IAAI,CAAC,IAAI,IAAI,CAACL,UAAU,oCAAoCkB,YAAY,CAACkB,GAAG,cAActB,KAAK,EAAE,CAAC;MAC9G,MAAMoB,QAAQ,GAAG,MAAMC,KAAK,CAACjB,YAAY,CAACkB,GAAG,EAAE;QAC7CC,MAAM,EAAEnB,YAAY,CAACmB,MAAM;QAC3BC,OAAO,EAAEpB,YAAY,CAACoB,OAAO;QAC7BC,IAAI,EAAErB,YAAY,CAACqB,IAAI;QACvBqB,MAAM,EAAEhD;MACV,CAAC,CAAC;MAEF,IAAI,CAACsB,QAAQ,CAACM,EAAE,EAAE;QAChB,MAAME,YAAY,GAAG,MAAMhD,sBAAsB,CAACwC,QAAQ,CAAC;QAC3D;QACA,IAAI,CAACtC,MAAM,CAAC0B,KAAK,CAAC,IAAI,IAAI,CAACtB,UAAU,gBAAgBkC,QAAQ,CAACO,MAAM,eAAe3B,KAAK,KAAK4B,YAAY,EAAE,EAAER,QAAQ,CAAC;QACtHvB,OAAO,CAAC;UAAEY,IAAI,EAAE,IAAI;UAAED,KAAK,EAAEoB,YAAY;UAAE5B;QAAM,CAAC,CAAC;QACnD,MAAM,IAAIC,KAAK,CAAC,kCAAkCmB,QAAQ,CAACO,MAAM,KAAKC,YAAY,EAAE,CAAC;MACvF;MACA,IAAI,CAACR,QAAQ,CAACK,IAAI,EAAE,MAAM,IAAIxB,KAAK,CAAC,qCAAqC,CAAC;MAE1EyC,MAAM,GAAGtB,QAAQ,CAACK,IAAI,CAACsB,SAAS,CAAC,CAAC;MAElC,OAAO,IAAI,EAAE;QACX,MAAM;UAAEtC,IAAI;UAAEuC;QAAM,CAAC,GAAG,MAAMN,MAAM,CAACO,IAAI,CAAC,CAAC;QAE3C,IAAIxC,IAAI,EAAE;UACR;UACA,IAAI,CAAC3B,MAAM,CAACS,IAAI,CAAC,IAAI,IAAI,CAACL,UAAU,yCAAyCc,KAAK,GAAG,CAAC;UACtF;UACA,IAAI6C,MAAM,CAAClC,IAAI,CAAC,CAAC,EAAE;YACjB;YACA,IAAI,CAAC7B,MAAM,CAACgC,IAAI,CAAC,IAAI,IAAI,CAAC5B,UAAU,oEAAoEc,KAAK,MAAM6C,MAAM,GAAG,CAAC;YAC7H,IAAI;cACF,MAAMX,YAAY,GAAG,IAAI,CAACJ,iBAAiB,CAACe,MAAM,CAAClC,IAAI,CAAC,CAAC,CAAC;cAC1DwB,kBAAkB,GAAG,IAAI,CAACF,kBAAkB,CAACC,YAAY,EAAErC,OAAO,EAAEG,KAAK,EAAEmC,kBAAkB,CAAC;cAC9F,IAAID,YAAY,CAACE,IAAI,KAAK,OAAO,EAAE;gBACjCvC,OAAO,CAAC;kBAAEY,IAAI,EAAE,IAAI;kBAAED,KAAK,EAAE0B,YAAY,CAAC1B,KAAK;kBAAER;gBAAM,CAAC,CAAC;gBACzD,OAAO,KAAK;cACd;YACF,CAAC,CAAC,OAAOkD,UAAU,EAAE;cACnB;cACA,IAAI,CAACpE,MAAM,CAAC0B,KAAK,CAAC,IAAI,IAAI,CAACtB,UAAU,gDAAgDc,KAAK,GAAG,EAAEkD,UAAU,EAAE,SAAS,EAAEL,MAAM,CAAC;cAC7HhD,OAAO,CAAC;gBAAEY,IAAI,EAAE,IAAI;gBAAED,KAAK,EAAE,oCAAoC0C,UAAU,CAACxC,OAAO,EAAE;gBAAEV;cAAM,CAAC,CAAC;cAC/F,OAAO,KAAK;YACd;UACF;UACAH,OAAO,CAAC;YAAE4C,KAAK,EAAE,EAAE;YAAEhC,IAAI,EAAE,IAAI;YAAET,KAAK;YAAEmD,WAAW,EAAEhB;UAAmB,CAAC,CAAC;UAC1E,MAAM,CAAC;QACT;QAEA,MAAMiB,YAAY,GAAGT,OAAO,CAACU,MAAM,CAACL,KAAK,EAAE;UAAEM,MAAM,EAAE;QAAK,CAAC,CAAC;;QAE5D;QACAT,MAAM,IAAIO,YAAY;QACtB,IAAIG,OAAO;QACX,OAAO,CAACA,OAAO,GAAGV,MAAM,CAACW,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE;UAC9C,MAAMzB,IAAI,GAAGc,MAAM,CAACY,SAAS,CAAC,CAAC,EAAEF,OAAO,CAAC,CAAC5C,IAAI,CAAC,CAAC;UAChDkC,MAAM,GAAGA,MAAM,CAACY,SAAS,CAACF,OAAO,GAAG,CAAC,CAAC;UACtC,IAAI,CAACxB,IAAI,EAAE;UAEX,IAAI;YACF,MAAMG,YAAY,GAAG,IAAI,CAACJ,iBAAiB,CAACC,IAAI,CAAC;YACjDI,kBAAkB,GAAG,IAAI,CAACF,kBAAkB,CAACC,YAAY,EAAErC,OAAO,EAAEG,KAAK,EAAEmC,kBAAkB,CAAC;YAE9F,IAAID,YAAY,CAACE,IAAI,KAAK,OAAO,EAAE;cACjC;cACA,IAAI,CAACtD,MAAM,CAAC0B,KAAK,CAAC,IAAI,IAAI,CAACtB,UAAU,mCAAmCc,KAAK,KAAKkC,YAAY,CAAC1B,KAAK,EAAE,CAAC;cACvGX,OAAO,CAAC;gBAAEY,IAAI,EAAE,IAAI;gBAAED,KAAK,EAAE0B,YAAY,CAAC1B,KAAK;gBAAER;cAAM,CAAC,CAAC;cACzD,OAAO,KAAK,CAAC,CAAC;YAChB;YACA;UACF,CAAC,CAAC,OAAOkD,UAAU,EAAE;YACnB;YACA,IAAI,CAACpE,MAAM,CAAC0B,KAAK,CAAC,IAAI,IAAI,CAACtB,UAAU,0CAA0Cc,KAAK,GAAG,EAAEkD,UAAU,EAAE,OAAO,EAAEnB,IAAI,CAAC;YACnHlC,OAAO,CAAC;cAAEY,IAAI,EAAE,IAAI;cAAED,KAAK,EAAE,8BAA8B0C,UAAU,CAACxC,OAAO,EAAE;cAAEV;YAAM,CAAC,CAAC;YACzF,OAAO,KAAK,CAAC,CAAC;UAChB;QACF;MAEF;MAEA,OAAO,IAAI,CAAC,CAAC;IAEf,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACd;MACA,IAAIA,KAAK,CAACkD,IAAI,KAAK,YAAY,EAAE;QAC/B,IAAI,CAAC5E,MAAM,CAACS,IAAI,CAAC,IAAI,IAAI,CAACL,UAAU,0DAA0Dc,KAAK,GAAG,CAAC;QACvG;QACAH,OAAO,CAAC;UAAEY,IAAI,EAAE,IAAI;UAAED,KAAK,EAAE,mBAAmB;UAAER;QAAM,CAAC,CAAC;QAC1D;MACF,CAAC,MAAM;QACL;QACA,IAAI,CAAClB,MAAM,CAAC0B,KAAK,CAAC,IAAI,IAAI,CAACtB,UAAU,yCAAyCc,KAAK,GAAG,EAAEQ,KAAK,CAAC;QAC9FX,OAAO,CAAC;UAAEY,IAAI,EAAE,IAAI;UAAED,KAAK,EAAEA,KAAK,CAACE,OAAO,IAAI,qCAAqC;UAAEV;QAAM,CAAC,CAAC;QAC7F;QACA,MAAMQ,KAAK;MACb;MACA,OAAO,KAAK,CAAC,CAAC;IAChB,CAAC,SAAS;MACR;MACA,IAAIkC,MAAM,EAAE;QACV,IAAI;UACF;UACA,MAAMA,MAAM,CAACiB,MAAM,CAAC,CAAC;UACrB,IAAI,CAAC7E,MAAM,CAACS,IAAI,CAAC,IAAI,IAAI,CAACL,UAAU,oDAAoDc,KAAK,GAAG,CAAC;QACnG,CAAC,CAAC,OAAO4D,WAAW,EAAE;UACpB,IAAI,CAAC9E,MAAM,CAACgC,IAAI,CAAC,IAAI,IAAI,CAAC5B,UAAU,8CAA8Cc,KAAK,sCAAsC,EAAE4D,WAAW,CAAC;QAC7I;QACA;MACF,CAAC,MAAM;QACL;QACA,IAAI,CAAC9E,MAAM,CAACS,IAAI,CAAC,IAAI,IAAI,CAACL,UAAU,uDAAuDc,KAAK,GAAG,CAAC;MACtG;IACF;EACF;AACF;AAEA6D,MAAM,CAACC,OAAO,GAAG9E,cAAc;;;;;;;;;;AC5S/B;;AAEA,MAAMA,cAAc,GAAGL,mBAAO,CAAC,yCAAY,CAAC;AAC5C,MAAMoF,iBAAiB,GAAGpF,mBAAO,CAAC,+EAA+B,CAAC;AAClE,MAAMqF,gBAAgB,GAAGrF,mBAAO,CAAC,6EAA8B,CAAC;AAChE,MAAMsF,gBAAgB,GAAGtF,mBAAO,CAAC,6EAA8B,CAAC;AAChE,MAAMuF,iBAAiB,GAAGvF,mBAAO,CAAC,+EAA+B,CAAC;AAClE,MAAMwF,kBAAkB,GAAGxF,mBAAO,CAAC,iFAAgC,CAAC;AACpE,MAAMyF,cAAc,GAAGzF,mBAAO,CAAC,yEAA4B,CAAC;;AAE5D;AACA;AACA;AACA,MAAM0F,UAAU,CAAC;EACf;AACF;AACA;AACA;AACA;AACA;EACE,OAAOC,gBAAgBA,CAACpF,UAAU,EAAE;IAClC,QAAQA,UAAU,CAACqF,WAAW,CAAC,CAAC;MAC9B,KAAK,SAAS;QACZ,OAAO,IAAIR,iBAAiB,CAAC,CAAC;MAChC,KAAK,QAAQ;QACX,OAAO,IAAIC,gBAAgB,CAAC,CAAC;MAC/B,KAAK,QAAQ;QACX,OAAO,IAAIC,gBAAgB,CAAC,CAAC;MAC/B,KAAK,SAAS;QACZ,OAAO,IAAIC,iBAAiB,CAAC,CAAC;MAChC,KAAK,UAAU;QACb,OAAO,IAAIC,kBAAkB,CAAC,CAAC;MACjC,KAAK,MAAM;QACT,OAAO,IAAIC,cAAc,CAAC,CAAC;MAC7B;QACE,MAAM,IAAInE,KAAK,CAAC,6BAA6Bf,UAAU,EAAE,CAAC;IAC9D;EACF;AACF;AAEA2E,MAAM,CAACC,OAAO,GAAGO,UAAU;;;;;;;;;;ACxC3B;AACA;AACA;AACA,MAAM3F,YAAY,CAAC;EACjB;AACF;AACA;AACA;AACA;EACE,MAAMW,UAAUA,CAACF,WAAW,EAAE;IAC5B,MAAM,IAAIc,KAAK,CAAC,8CAA8C,CAAC;EACjE;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMT,cAAcA,CAACC,aAAa,EAAE;IAClC,MAAM,IAAIQ,KAAK,CAAC,kDAAkD,CAAC;EACrE;;EAEA;AACF;AACA;AACA;EACE,MAAMY,mBAAmBA,CAAA,EAAG;IAC1B,MAAM,IAAIZ,KAAK,CAAC,uDAAuD,CAAC;EAC1E;AACF;AAEA4D,MAAM,CAACC,OAAO,GAAGpF,YAAY;;;;;;;;;;ACtC7B,MAAMM,cAAc,GAAGL,mBAAO,CAAC,0CAAa,CAAC;;AAE7C;AACA;AACA;AACA,MAAMoF,iBAAiB,SAAS/E,cAAc,CAAC;EAC7CC,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,SAAS,CAAC;EAClB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMoB,gBAAgBA,CAACX,MAAM,EAAEmC,MAAM,EAAE9B,MAAM,EAAE;IAC7C,MAAMyE,QAAQ,GAAG,IAAI,CAACpF,MAAM,EAAEoF,QAAQ,IAAI,4CAA4C;IACtF,IAAI,CAAC1F,MAAM,CAACS,IAAI,CAAC,IAAI,IAAI,CAACL,UAAU,qCAAqC2C,MAAM,CAAC7B,KAAK,EAAE,CAAC;IAExF,MAAMyE,cAAc,GAAG;MACrBzE,KAAK,EAAE6B,MAAM,CAAC7B,KAAK;MACnBsD,MAAM,EAAE;IACV,CAAC;IAED,MAAMoB,QAAQ,GAAG,EAAE;IACnB,IAAI7C,MAAM,CAAC8C,YAAY,EAAE;MACvBD,QAAQ,CAACE,IAAI,CAAC;QAAEC,IAAI,EAAE,QAAQ;QAAEC,OAAO,EAAEjD,MAAM,CAAC8C;MAAa,CAAC,CAAC;IACjE;IACA,IAAI9C,MAAM,CAACkD,mBAAmB,IAAIlD,MAAM,CAACkD,mBAAmB,CAACnE,MAAM,GAAG,CAAC,EAAE;MACvE8D,QAAQ,CAACE,IAAI,CAAC,GAAG,IAAI,CAACI,qBAAqB,CAACnD,MAAM,CAACkD,mBAAmB,CAAC,CAAC;IAC1E;IACAL,QAAQ,CAACE,IAAI,CAAC;MAAEC,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAEpF;IAAO,CAAC,CAAC,CAAC,CAAC;IAClD+E,cAAc,CAACC,QAAQ,GAAGA,QAAQ;;IAElC;IACA,IAAI7C,MAAM,CAACoD,cAAc,KAAK,WAAW,EAAE;MACzCR,cAAc,CAAC5C,MAAM,CAACqD,cAAc,IAAI,uBAAuB,CAAC,GAAGrD,MAAM,CAACsD,SAAS;IACrF,CAAC,MAAM;MACLV,cAAc,CAAC5C,MAAM,CAACqD,cAAc,IAAI,YAAY,CAAC,GAAGrD,MAAM,CAACsD,SAAS;MACxE,IAAI,aAAa,IAAItD,MAAM,EAAE;QAC3B4C,cAAc,CAACW,WAAW,GAAGvD,MAAM,CAACuD,WAAW;MACjD;MACA,IAAI,MAAM,IAAIvD,MAAM,EAAE;QACpB4C,cAAc,CAACY,KAAK,GAAGxD,MAAM,CAACyD,IAAI;MACpC;IACF;IAEA,OAAO;MACLhE,GAAG,EAAEkD,QAAQ;MACbjD,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,UAAUzB,MAAM;MACnC,CAAC;MACD0B,IAAI,EAAE8D,IAAI,CAACC,SAAS,CAACf,cAAc;IACrC,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE3C,iBAAiBA,CAACC,IAAI,EAAE;IACtB,IAAI,CAACA,IAAI,EAAE;MACT,OAAO;QAAEK,IAAI,EAAE;MAAS,CAAC;IAC3B;;IAEA;IACA,IAAIL,IAAI,KAAK,cAAc,EAAE;MAC3B,OAAO;QAAEK,IAAI,EAAE;MAAO,CAAC,CAAC,CAAC;IAC3B;IAEA,IAAIL,IAAI,CAAC0D,UAAU,CAAC,QAAQ,CAAC,EAAE;MAC7B,IAAI;QACF,MAAMC,IAAI,GAAGH,IAAI,CAACI,KAAK,CAAC5D,IAAI,CAAC0B,SAAS,CAAC,CAAC,CAAC,CAAC;QAC1C,MAAMqB,OAAO,GAAGY,IAAI,CAACE,OAAO,GAAG,CAAC,CAAC,EAAEC,KAAK,EAAEf,OAAO;QAEjD,IAAIA,OAAO,EAAE;UACX,OAAO;YAAE1C,IAAI,EAAE,SAAS;YAAEK,KAAK,EAAEqC;UAAQ,CAAC;QAC5C,CAAC,MAAM;UACL;UACA,OAAO;YAAE1C,IAAI,EAAE;UAAS,CAAC;QAC3B;MACF,CAAC,CAAC,OAAO0D,CAAC,EAAE;QACV,IAAI,CAAChH,MAAM,CAAC0B,KAAK,CAAC,IAAI,IAAI,CAACtB,UAAU,+BAA+B,EAAE4G,CAAC,EAAE,OAAO,EAAE/D,IAAI,CAAC;QACvF;QACA,OAAO;UAAEK,IAAI,EAAE,OAAO;UAAE5B,KAAK,EAAE,8BAA8BsF,CAAC,CAACpF,OAAO;QAAG,CAAC;MAC5E;IACF;;IAEA;IACA,OAAO;MAAE0B,IAAI,EAAE;IAAS,CAAC;EAC3B;;EAEA;AACF;AACA;AACA;AACA;EACE4C,qBAAqBA,CAACe,OAAO,EAAE;IAC7B,OAAOA,OAAO,CAACC,GAAG,CAACC,GAAG,IAAI;MACxB;MACA,IAAIpB,IAAI,GAAG,MAAM;MACjB,IAAIoB,GAAG,CAACpB,IAAI,KAAK,WAAW,EAAEA,IAAI,GAAG,WAAW,CAAC,KAC5C,IAAIoB,GAAG,CAACpB,IAAI,KAAK,QAAQ,EAAEA,IAAI,GAAG,QAAQ;MAE/C,OAAO;QACLA,IAAI;QACJC,OAAO,EAAEmB,GAAG,CAACnB;MACf,CAAC;IACH,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM3D,uBAAuBA,CAACpB,MAAM,EAAEC,KAAK,EAAE;IAC3C,MAAMwE,QAAQ,GAAG,IAAI,CAACpF,MAAM,EAAEoF,QAAQ,IAAI,4CAA4C;IACtF,MAAM0B,iBAAiB,GAAG;MACxBlG,KAAK,EAAEA,KAAK;MACZ0E,QAAQ,EAAE,CACR;QAAEG,IAAI,EAAE,MAAM;QAAEC,OAAO,EAAE;MAAuB,CAAC,CAClD;MACDqB,UAAU,EAAE,CAAC,CAAC;IAChB,CAAC;IAED,OAAO;MACL7E,GAAG,EAAEkD,QAAQ;MACbjD,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,UAAUzB,MAAM;MACnC,CAAC;MACD0B,IAAI,EAAE8D,IAAI,CAACC,SAAS,CAACU,iBAAiB;IACxC,CAAC;EACH;AACF;AAEArC,MAAM,CAACC,OAAO,GAAGC,iBAAiB;;;;;;;;;;ACtJlC,MAAM/E,cAAc,GAAGL,mBAAO,CAAC,0CAAa,CAAC;;AAE7C;AACA;AACA;AACA,MAAMqF,gBAAgB,SAAShF,cAAc,CAAC;EAC5CC,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,QAAQ,CAAC;EACjB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMoB,gBAAgBA,CAACX,MAAM,EAAEmC,MAAM,EAAE9B,MAAM,EAAE;IAC7C,MAAMyE,QAAQ,GAAG,IAAI,CAACpF,MAAM,EAAEoF,QAAQ,IAAI,uCAAuC;IACjF,IAAI,CAAC1F,MAAM,CAACS,IAAI,CAAC,IAAI,IAAI,CAACL,UAAU,qCAAqC2C,MAAM,CAAC7B,KAAK,EAAE,CAAC;IAExF,MAAMyE,cAAc,GAAG;MACrBzE,KAAK,EAAE6B,MAAM,CAAC7B,KAAK;MACnBmG,UAAU,EAAEtE,MAAM,CAACsD,SAAS;MAC5BT,QAAQ,EAAE,CAAC;QAAEG,IAAI,EAAE,MAAM;QAAEC,OAAO,EAAE,CAAC;UAAE1C,IAAI,EAAE,MAAM;UAAEgE,IAAI,EAAE1G;QAAO,CAAC;MAAE,CAAC,CAAC;MAAE;MACzE4D,MAAM,EAAE;IACV,CAAC;;IAED;IACA,IAAI,aAAa,IAAIzB,MAAM,EAAE;MAC3B4C,cAAc,CAACW,WAAW,GAAGvD,MAAM,CAACuD,WAAW;IACjD;IACA,IAAI,MAAM,IAAIvD,MAAM,EAAE;MACpB4C,cAAc,CAACY,KAAK,GAAGxD,MAAM,CAACyD,IAAI;IACpC;IACA,IAAIzD,MAAM,CAAC8C,YAAY,EAAE;MACvBF,cAAc,CAAC4B,MAAM,GAAGxE,MAAM,CAAC8C,YAAY;IAC7C;;IAEA;IACA,IAAI9C,MAAM,CAACkD,mBAAmB,IAAIlD,MAAM,CAACkD,mBAAmB,CAACnE,MAAM,GAAG,CAAC,EAAE;MACvE;MACA6D,cAAc,CAACC,QAAQ,GAAG,IAAI,CAAC4B,qBAAqB,CAACzE,MAAM,CAACkD,mBAAmB,EAAErF,MAAM,CAAC;IAC1F;IAEA,OAAO;MACL4B,GAAG,EAAEkD,QAAQ;MACbjD,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,WAAW,EAAEzB,MAAM;QACnB,mBAAmB,EAAE,YAAY;QACjC,2CAA2C,EAAE,MAAM,CAAC;MACtD,CAAC;MACD0B,IAAI,EAAE8D,IAAI,CAACC,SAAS,CAACf,cAAc;IACrC,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE3C,iBAAiBA,CAACC,IAAI,EAAE;IACtB,IAAI,CAACA,IAAI,EAAE;MACT,OAAO;QAAEK,IAAI,EAAE;MAAS,CAAC;IAC3B;;IAEA;IACA,IAAIL,IAAI,CAAC0D,UAAU,CAAC,SAAS,CAAC,EAAE;MAC9B,MAAMc,SAAS,GAAGxE,IAAI,CAAC0B,SAAS,CAAC,CAAC,CAAC,CAAC9C,IAAI,CAAC,CAAC;MAC1C;MACA;MACA;MACA,IAAI4F,SAAS,KAAK,cAAc,EAAE;QAChC,OAAO;UAAEnE,IAAI,EAAE;QAAO,CAAC,CAAC,CAAC;MAC3B;MACA;MACA,OAAO;QAAEA,IAAI,EAAE;MAAS,CAAC;IAC3B;IAEA,IAAIL,IAAI,CAAC0D,UAAU,CAAC,QAAQ,CAAC,EAAE;MAC7B,IAAI;QACF,MAAMC,IAAI,GAAGH,IAAI,CAACI,KAAK,CAAC5D,IAAI,CAAC0B,SAAS,CAAC,CAAC,CAAC,CAAC;;QAE1C;QACA,IAAIiC,IAAI,CAACtD,IAAI,KAAK,qBAAqB,IAAIsD,IAAI,CAACG,KAAK,EAAEzD,IAAI,KAAK,YAAY,EAAE;UAC5E,MAAM0C,OAAO,GAAGY,IAAI,CAACG,KAAK,CAACO,IAAI;UAC/B,OAAOtB,OAAO,GAAG;YAAE1C,IAAI,EAAE,SAAS;YAAEK,KAAK,EAAEqC;UAAQ,CAAC,GAAG;YAAE1C,IAAI,EAAE;UAAS,CAAC;QAC3E;;QAEA;QACA,IAAIsD,IAAI,CAACtD,IAAI,KAAK,OAAO,EAAE;UACzB,MAAMoE,kBAAkB,GAAG,iBAAiBd,IAAI,CAAClF,KAAK,EAAE4B,IAAI,MAAMsD,IAAI,CAAClF,KAAK,EAAEE,OAAO,IAAI,sBAAsB,EAAE;UACjH,IAAI,CAAC5B,MAAM,CAAC0B,KAAK,CAAC,IAAI,IAAI,CAACtB,UAAU,KAAKsH,kBAAkB,EAAE,EAAEd,IAAI,CAAClF,KAAK,CAAC;UAC3E,OAAO;YAAE4B,IAAI,EAAE,OAAO;YAAE5B,KAAK,EAAEgG;UAAmB,CAAC;QACrD;;QAEA;QACA,OAAO;UAAEpE,IAAI,EAAE;QAAS,CAAC;MAE3B,CAAC,CAAC,OAAO0D,CAAC,EAAE;QACV;QACA,IAAI,CAAChH,MAAM,CAAC0B,KAAK,CAAC,IAAI,IAAI,CAACtB,UAAU,+BAA+B,EAAE4G,CAAC,EAAE,OAAO,EAAE/D,IAAI,CAAC;QACvF,OAAO;UAAEK,IAAI,EAAE,OAAO;UAAE5B,KAAK,EAAE,8BAA8BsF,CAAC,CAACpF,OAAO;QAAG,CAAC;MAC5E;IACF;;IAEA;IACA,OAAO;MAAE0B,IAAI,EAAE;IAAS,CAAC;EAC3B;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEkE,qBAAqBA,CAACP,OAAO,EAAEU,aAAa,EAAE;IAC5C,MAAMC,iBAAiB,GAAG,EAAE;;IAE5B;IACA,KAAK,MAAMhG,OAAO,IAAIqF,OAAO,EAAE;MAC7B;MACA,MAAMlB,IAAI,GAAGnE,OAAO,CAACmE,IAAI,KAAK,WAAW,GAAG,WAAW,GAAG,MAAM;MAEhE6B,iBAAiB,CAAC9B,IAAI,CAAC;QACrBC,IAAI,EAAEA,IAAI;QACVC,OAAO,EAAE,CACP;UACE1C,IAAI,EAAE,MAAM;UACZgE,IAAI,EAAE1F,OAAO,CAACoE;QAChB,CAAC;MAEL,CAAC,CAAC;IACJ;;IAEA;IACA4B,iBAAiB,CAAC9B,IAAI,CAAC;MACrBC,IAAI,EAAE,MAAM;MACZC,OAAO,EAAE,CACP;QACE1C,IAAI,EAAE,MAAM;QACZgE,IAAI,EAAEK;MACR,CAAC;IAEL,CAAC,CAAC;IAEF,OAAOC,iBAAiB;EAC1B;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMvF,uBAAuBA,CAACpB,MAAM,EAAEC,KAAK,EAAE;IAC3C,MAAMwE,QAAQ,GAAG,IAAI,CAACpF,MAAM,EAAEoF,QAAQ,IAAI,uCAAuC;IACjF,MAAM0B,iBAAiB,GAAG;MACxBlG,KAAK,EAAEA,KAAK;MACZmG,UAAU,EAAE,CAAC;MAAE;MACfzB,QAAQ,EAAE,CACR;QACEG,IAAI,EAAE,MAAM;QACZC,OAAO,EAAE,CACP;UACE1C,IAAI,EAAE,MAAM;UACZgE,IAAI,EAAE;QACR,CAAC;MAEL,CAAC;IAEL,CAAC;IAED,OAAO;MACL9E,GAAG,EAAEkD,QAAQ;MACbjD,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,WAAW,EAAEzB,MAAM;QACnB,mBAAmB,EAAE,YAAY;QACjC,2CAA2C,EAAE,MAAM,CAAC;MACtD,CAAC;MACD0B,IAAI,EAAE8D,IAAI,CAACC,SAAS,CAACU,iBAAiB;IACxC,CAAC;EACH;AACF;AAEArC,MAAM,CAACC,OAAO,GAAGE,gBAAgB;;;;;;;;;;ACpMjC,MAAMhF,cAAc,GAAGL,mBAAO,CAAC,0CAAa,CAAC;;AAE7C;AACA;AACA;AACA,MAAMwF,kBAAkB,SAASnF,cAAc,CAAC;EAC9CC,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,UAAU,CAAC;EACnB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMoB,gBAAgBA,CAACX,MAAM,EAAEmC,MAAM,EAAE9B,MAAM,EAAE;IAC7C,MAAMyE,QAAQ,GAAG,IAAI,CAACpF,MAAM,EAAEoF,QAAQ,IAAI,8CAA8C;IACxF,IAAI,CAAC1F,MAAM,CAACS,IAAI,CAAC,IAAI,IAAI,CAACL,UAAU,qCAAqC2C,MAAM,CAAC7B,KAAK,EAAE,CAAC;IAExF,MAAMyE,cAAc,GAAG;MACrBzE,KAAK,EAAE6B,MAAM,CAAC7B,KAAK;MACnBsD,MAAM,EAAE;IACV,CAAC;IAED,IAAIoB,QAAQ,GAAG,EAAE;IACjB;IACA,IAAI7C,MAAM,CAAC8C,YAAY,EAAE;MACvBD,QAAQ,CAACE,IAAI,CAAC;QAAEC,IAAI,EAAE,QAAQ;QAAEC,OAAO,EAAEjD,MAAM,CAAC8C;MAAa,CAAC,CAAC;IACjE;;IAEA;IACA,IAAI9C,MAAM,CAACkD,mBAAmB,IAAIlD,MAAM,CAACkD,mBAAmB,CAACnE,MAAM,GAAG,CAAC,EAAE;MACvE8D,QAAQ,CAACE,IAAI,CAAC,GAAG,IAAI,CAAC+B,uBAAuB,CAAC9E,MAAM,CAACkD,mBAAmB,CAAC,CAAC;IAC5E;;IAEA;IACA,MAAM6B,WAAW,GAAGlC,QAAQ,CAAC9D,MAAM,GAAG,CAAC,GAAG8D,QAAQ,CAACA,QAAQ,CAAC9D,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI;IAE9E,IAAIgG,WAAW,IAAIA,WAAW,CAAC/B,IAAI,KAAK,MAAM,EAAE;MAC9C;MACA,IAAI,CAAC/F,MAAM,CAACS,IAAI,CAAC,IAAI,IAAI,CAACL,UAAU,sFAAsF,CAAC;MAC3H0H,WAAW,CAAC9B,OAAO,IAAI,OAAOpF,MAAM,EAAE,CAAC,CAAC;IAC1C,CAAC,MAAM;MACL;MACAgF,QAAQ,CAACE,IAAI,CAAC;QAAEC,IAAI,EAAE,MAAM;QAAEC,OAAO,EAAEpF;MAAO,CAAC,CAAC;IAClD;;IAEA;IACA+E,cAAc,CAACC,QAAQ,GAAGA,QAAQ;;IAElC;IACAD,cAAc,CAAC5C,MAAM,CAACqD,cAAc,IAAI,YAAY,CAAC,GAAGrD,MAAM,CAACsD,SAAS;IACxE,IAAI,aAAa,IAAItD,MAAM,EAAE;MAC3B4C,cAAc,CAACW,WAAW,GAAGvD,MAAM,CAACuD,WAAW;IACjD;IACA,IAAI,MAAM,IAAIvD,MAAM,EAAE;MACpB4C,cAAc,CAACY,KAAK,GAAGxD,MAAM,CAACyD,IAAI;IACpC;IAEA,OAAO;MACLhE,GAAG,EAAEkD,QAAQ;MACbjD,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,UAAUzB,MAAM;MACnC,CAAC;MACD0B,IAAI,EAAE8D,IAAI,CAACC,SAAS,CAACf,cAAc;IACrC,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE3C,iBAAiBA,CAACC,IAAI,EAAE;IACtB,IAAI,CAACA,IAAI,EAAE;MACT,OAAO;QAAEK,IAAI,EAAE;MAAS,CAAC;IAC3B;;IAEA;IACA,IAAIL,IAAI,KAAK,cAAc,EAAE;MAC3B,OAAO;QAAEK,IAAI,EAAE;MAAO,CAAC;IACzB;IAEA,IAAIL,IAAI,CAAC0D,UAAU,CAAC,QAAQ,CAAC,EAAE;MAC7B,IAAI;QACF,MAAMC,IAAI,GAAGH,IAAI,CAACI,KAAK,CAAC5D,IAAI,CAAC0B,SAAS,CAAC,CAAC,CAAC,CAAC;QAC1C,MAAMqB,OAAO,GAAGY,IAAI,CAACE,OAAO,GAAG,CAAC,CAAC,EAAEC,KAAK,EAAEf,OAAO;QAEjD,IAAIA,OAAO,EAAE;UACX,OAAO;YAAE1C,IAAI,EAAE,SAAS;YAAEK,KAAK,EAAEqC;UAAQ,CAAC;QAC5C,CAAC,MAAM;UACL;UACA,IAAIY,IAAI,CAACE,OAAO,GAAG,CAAC,CAAC,EAAEiB,aAAa,EAAE;YACnC,IAAI,CAAC/H,MAAM,CAACS,IAAI,CAAC,IAAI,IAAI,CAACL,UAAU,kCAAkCwG,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACiB,aAAa,EAAE,CAAC;UACzG;UACA,OAAO;YAAEzE,IAAI,EAAE;UAAS,CAAC;QAC3B;MACF,CAAC,CAAC,OAAO0D,CAAC,EAAE;QACV,IAAI,CAAChH,MAAM,CAAC0B,KAAK,CAAC,IAAI,IAAI,CAACtB,UAAU,+BAA+B,EAAE4G,CAAC,EAAE,OAAO,EAAE/D,IAAI,CAAC;QACvF,OAAO;UAAEK,IAAI,EAAE,OAAO;UAAE5B,KAAK,EAAE,8BAA8BsF,CAAC,CAACpF,OAAO;QAAG,CAAC;MAC5E;IACF;IAEA,OAAO;MAAE0B,IAAI,EAAE;IAAS,CAAC;EAC3B;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEuE,uBAAuBA,CAACZ,OAAO,EAAE;IAC/B,MAAMW,iBAAiB,GAAG,EAAE;IAC5B;IACA,IAAI,CAAC5H,MAAM,CAACS,IAAI,CAAC,IAAI,IAAI,CAACL,UAAU,gBAAgB6G,OAAO,CAACnF,MAAM,+CAA+C,CAAC;IAElH,KAAK,MAAMqF,GAAG,IAAIF,OAAO,EAAE;MACzB,IAAIe,OAAO;MACX;MACA,IAAIb,GAAG,CAACpB,IAAI,KAAK,MAAM,EAAE;QACvBiC,OAAO,GAAG,MAAM;MAClB,CAAC,MAAM,IAAIb,GAAG,CAACpB,IAAI,KAAK,WAAW,EAAE;QACnCiC,OAAO,GAAG,WAAW;MACvB,CAAC,MAAM;QACL,IAAI,CAAChI,MAAM,CAACgC,IAAI,CAAC,IAAI,IAAI,CAAC5B,UAAU,iCAAiC+G,GAAG,CAACpB,IAAI,IAAI,SAAS,mDAAmD,CAAC;QAC9I,SAAS,CAAC;MACZ;MAEA,MAAM+B,WAAW,GAAGF,iBAAiB,CAAC9F,MAAM,GAAG,CAAC,GAAG8F,iBAAiB,CAACA,iBAAiB,CAAC9F,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI;;MAEzG;MACA,IAAIgG,WAAW,IAAIA,WAAW,CAAC/B,IAAI,KAAKiC,OAAO,EAAE;QAC/C;QACA,IAAI,CAAChI,MAAM,CAACS,IAAI,CAAC,IAAI,IAAI,CAACL,UAAU,0BAA0B4H,OAAO,sCAAsC,CAAC;QAC5GF,WAAW,CAAC9B,OAAO,IAAI,OAAOmB,GAAG,CAACnB,OAAO,EAAE,CAAC,CAAC;MAC/C,CAAC,MAAM;QACL;QACA4B,iBAAiB,CAAC9B,IAAI,CAAC;UAAEC,IAAI,EAAEiC,OAAO;UAAEhC,OAAO,EAAEmB,GAAG,CAACnB;QAAQ,CAAC,CAAC;MACjE;IACF;;IAEA;IACA,KAAK,IAAIiC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,iBAAiB,CAAC9F,MAAM,GAAG,CAAC,EAAEmG,CAAC,EAAE,EAAE;MACnD,IAAIL,iBAAiB,CAACK,CAAC,CAAC,CAAClC,IAAI,KAAK6B,iBAAiB,CAACK,CAAC,GAAC,CAAC,CAAC,CAAClC,IAAI,EAAE;QAC3D;QACA,IAAI,CAAC/F,MAAM,CAAC0B,KAAK,CAAC,IAAI,IAAI,CAACtB,UAAU,qEAAqE6H,CAAC,WAAWL,iBAAiB,CAACK,CAAC,CAAC,CAAClC,IAAI,EAAE,CAAC;QAClJ;MACJ;IACJ;IAEA,IAAI,CAAC/F,MAAM,CAACS,IAAI,CAAC,IAAI,IAAI,CAACL,UAAU,gCAAgCwH,iBAAiB,CAAC9F,MAAM,0BAA0B,CAAC;IACvH,OAAO8F,iBAAiB;EAC1B;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMvF,uBAAuBA,CAACpB,MAAM,EAAEC,KAAK,EAAE;IAC3C,MAAMwE,QAAQ,GAAG,IAAI,CAACpF,MAAM,EAAEoF,QAAQ,IAAI,8CAA8C;IACxF,MAAM0B,iBAAiB,GAAG;MACxBlG,KAAK,EAAEA,KAAK;MACZ0E,QAAQ,EAAE,CACR;QAAEG,IAAI,EAAE,MAAM;QAAEC,OAAO,EAAE;MAAuB,CAAC,CAClD;MACDqB,UAAU,EAAE,CAAC,CAAC;IAChB,CAAC;IAED,OAAO;MACL7E,GAAG,EAAEkD,QAAQ;MACbjD,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,UAAUzB,MAAM;MACnC,CAAC;MACD0B,IAAI,EAAE8D,IAAI,CAACC,SAAS,CAACU,iBAAiB;IACxC,CAAC;EACH;AACF;AAEArC,MAAM,CAACC,OAAO,GAAGK,kBAAkB;;;;;;;;;;ACnMnC;AACA,MAAMnF,cAAc,GAAGL,mBAAO,CAAC,0CAAa,CAAC;;AAE7C;AACA;AACA;AACA,MAAMsF,gBAAgB,SAASjF,cAAc,CAAC;EAC5CC,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,QAAQ,CAAC;EACjB;EAEA+H,kBAAkBA,CAAChH,KAAK,EAAEuB,MAAM,EAAE;IAChC,MAAM0F,YAAY,GAAG,4EAA4E;IACjG,IAAI,CAACjH,KAAK,IAAI,CAACuB,MAAM,EAAE;MACrB,MAAM,IAAItB,KAAK,CAAC,yDAAyD,CAAC;IAC5E;IACA,MAAMiH,cAAc,GAAGlH,KAAK,CAACmH,QAAQ,CAAC,OAAO,CAAC;IAC9C,MAAMC,UAAU,GAAGF,cAAc,GAAG,QAAQ,GAAG,IAAI;IACnD,IAAI,CAACpI,MAAM,CAACS,IAAI,CAAC,IAAI,IAAI,CAACL,UAAU,wBAAwBkI,UAAU,gBAAgBpH,KAAK,GAAG,CAAC;IAC/F,OAAOiH,YAAY,CAChBI,OAAO,CAAC,WAAW,EAAED,UAAU,CAAC,CAChCC,OAAO,CAAC,SAAS,EAAErH,KAAK,CAAC,CACzBqH,OAAO,CAAC,UAAU,EAAE9F,MAAM,CAAC;EAChC;EAEA,MAAMlB,gBAAgBA,CAACX,MAAM,EAAEmC,MAAM,EAAE9B,MAAM,EAAE;IAC7C,MAAMyE,QAAQ,GAAG,IAAI,CAACwC,kBAAkB,CAACnF,MAAM,CAAC7B,KAAK,EAAE,wBAAwB,CAAC;IAChF,IAAI,CAAClB,MAAM,CAACS,IAAI,CAAC,IAAI,IAAI,CAACL,UAAU,8BAA8BsF,QAAQ,EAAE,CAAC;IAC7E,MAAMlD,GAAG,GAAG,IAAIgG,GAAG,CAAC9C,QAAQ,CAAC;IAC7BlD,GAAG,CAACiG,YAAY,CAACC,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC;IACrClG,GAAG,CAACiG,YAAY,CAACC,MAAM,CAAC,KAAK,EAAEzH,MAAM,CAAC;IAEtC,IAAI0H,gBAAgB;IACpB,IAAI5F,MAAM,CAACkD,mBAAmB,IAAIlD,MAAM,CAACkD,mBAAmB,CAACnE,MAAM,GAAG,CAAC,EAAE;MACvE6G,gBAAgB,GAAG,IAAI,CAACC,+BAA+B,CAAC7F,MAAM,CAACkD,mBAAmB,EAAErF,MAAM,CAAC;IAC7F,CAAC,MAAM;MACL+H,gBAAgB,GAAG;QAAEE,QAAQ,EAAE,CAAC;UAAE9C,IAAI,EAAE,MAAM;UAAE+C,KAAK,EAAE,CAAC;YAAExB,IAAI,EAAE1G;UAAO,CAAC;QAAE,CAAC;MAAE,CAAC;IAChF;IAEA,IAAImC,MAAM,CAAC8C,YAAY,EAAE;MACvB,IAAI9C,MAAM,CAACgG,yBAAyB,KAAK,IAAI,EAAE;QAC7C,IAAI,CAAC/I,MAAM,CAACS,IAAI,CAAC,IAAI,IAAI,CAACL,UAAU,6DAA6D2C,MAAM,CAAC7B,KAAK,GAAG,CAAC;QACjHyH,gBAAgB,CAACK,iBAAiB,GAAG;UAAEF,KAAK,EAAE,CAAC;YAAExB,IAAI,EAAEvE,MAAM,CAAC8C;UAAa,CAAC;QAAE,CAAC;MACjF,CAAC,MAAM;QACL,IAAI,CAAC7F,MAAM,CAACgC,IAAI,CAAC,IAAI,IAAI,CAAC5B,UAAU,mFAAmF2C,MAAM,CAAC7B,KAAK,+CAA+C,CAAC;MACrL;IACF;IAEAyH,gBAAgB,CAACM,gBAAgB,GAAG,CAAC,CAAC;IACtC,IAAIlG,MAAM,CAACqD,cAAc,EAAE;MACzBuC,gBAAgB,CAACM,gBAAgB,CAAClG,MAAM,CAACqD,cAAc,CAAC,GAAGrD,MAAM,CAACsD,SAAS;IAC7E,CAAC,MAAM;MACLsC,gBAAgB,CAACM,gBAAgB,CAACC,eAAe,GAAGnG,MAAM,CAACsD,SAAS;IACtE;IACA,IAAI,aAAa,IAAItD,MAAM,EAAE;MAC3B4F,gBAAgB,CAACM,gBAAgB,CAAC3C,WAAW,GAAGvD,MAAM,CAACuD,WAAW;IACpE;IACA,IAAI,MAAM,IAAIvD,MAAM,EAAE;MACpB4F,gBAAgB,CAACM,gBAAgB,CAACzC,IAAI,GAAGzD,MAAM,CAACyD,IAAI;IACtD;IAEA,OAAO;MACLhE,GAAG,EAAEA,GAAG,CAAC2G,QAAQ,CAAC,CAAC;MACnB1G,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAE8D,IAAI,CAACC,SAAS,CAACiC,gBAAgB;IACvC,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE3F,iBAAiBA,CAACC,IAAI,EAAE;IACtB,IAAI,CAACA,IAAI,IAAI,CAACA,IAAI,CAAC0D,UAAU,CAAC,QAAQ,CAAC,EAAE;MACvC;MACA;MACA;MACA,IAAI1D,IAAI,KAAK,cAAc,EAAE;QAC1B;QACA,IAAI,CAACjD,MAAM,CAACS,IAAI,CAAC,IAAI,IAAI,CAACL,UAAU,sCAAsC,CAAC;QAC3E,OAAO;UAAEkD,IAAI,EAAE;QAAO,CAAC;MAC1B;MACA,OAAO;QAAEA,IAAI,EAAE;MAAS,CAAC;IAC3B;;IAEA;IACA,MAAM8F,UAAU,GAAGnG,IAAI,CAAC0B,SAAS,CAAC,CAAC,CAAC,CAAC9C,IAAI,CAAC,CAAC,CAAC,CAAC;;IAE7C,IAAI,CAACuH,UAAU,EAAE;MACf,OAAO;QAAE9F,IAAI,EAAE;MAAS,CAAC,CAAC,CAAC;IAC7B;IAEA,IAAI;MACF,MAAMsD,IAAI,GAAGH,IAAI,CAACI,KAAK,CAACuC,UAAU,CAAC;;MAEnC;MACA;MACA,MAAMC,SAAS,GAAGzC,IAAI,EAAE0C,UAAU,GAAG,CAAC,CAAC,EAAEtD,OAAO,EAAE8C,KAAK,GAAG,CAAC,CAAC,EAAExB,IAAI;MAElE,IAAI+B,SAAS,IAAI,OAAOA,SAAS,KAAK,QAAQ,EAAE;QAC9C;QACA,OAAO;UAAE/F,IAAI,EAAE,SAAS;UAAEK,KAAK,EAAE0F;QAAU,CAAC;MAC9C,CAAC,MAAM;QACL;QACA,IAAIzC,IAAI,EAAElF,KAAK,EAAE;UACb,MAAMoB,YAAY,GAAG8D,IAAI,CAAClF,KAAK,CAACE,OAAO,IAAI6E,IAAI,CAACC,SAAS,CAACE,IAAI,CAAClF,KAAK,CAAC;UACrE,IAAI,CAAC1B,MAAM,CAAC0B,KAAK,CAAC,IAAI,IAAI,CAACtB,UAAU,mCAAmC0C,YAAY,EAAE,EAAE8D,IAAI,CAAClF,KAAK,CAAC;UACnG,OAAO;YAAE4B,IAAI,EAAE,OAAO;YAAE5B,KAAK,EAAE,wBAAwBoB,YAAY;UAAG,CAAC;QAC3E;QACA;QACA,IAAI8D,IAAI,EAAE0C,UAAU,GAAG,CAAC,CAAC,EAAEC,YAAY,EAAE;UACrC,IAAI,CAACvJ,MAAM,CAACS,IAAI,CAAC,IAAI,IAAI,CAACL,UAAU,sCAAsCwG,IAAI,CAAC0C,UAAU,CAAC,CAAC,CAAC,CAACC,YAAY,EAAE,CAAC;UAC5G;UACA;QACJ,CAAC,MAAM;UACH,IAAI,CAACvJ,MAAM,CAACgC,IAAI,CAAC,IAAI,IAAI,CAAC5B,UAAU,mEAAmE,EAAEwG,IAAI,CAAC;QAClH;QACA,OAAO;UAAEtD,IAAI,EAAE;QAAS,CAAC,CAAC,CAAC;MAC7B;IACF,CAAC,CAAC,OAAOc,UAAU,EAAE;MACnB,IAAI,CAACpE,MAAM,CAAC0B,KAAK,CAAC,IAAI,IAAI,CAACtB,UAAU,iCAAiC,EAAEgE,UAAU,EAAE,kBAAkB,EAAEgF,UAAU,CAAC;MACnH;MACA,OAAO;QAAE9F,IAAI,EAAE,OAAO;QAAE5B,KAAK,EAAE,8BAA8B0C,UAAU,CAACxC,OAAO;MAAG,CAAC;IACrF;EACF;EAEAgH,+BAA+BA,CAAC3B,OAAO,EAAEU,aAAa,EAAE;IACtD,MAAMkB,QAAQ,GAAG,EAAE;IACnB,KAAK,MAAMjH,OAAO,IAAIqF,OAAO,EAAE;MAC7B,MAAMuC,WAAW,GAAG5H,OAAO,CAACmE,IAAI,KAAK,WAAW,GAAG,OAAO,GAAG,MAAM;MACnE8C,QAAQ,CAAC/C,IAAI,CAAC;QAAEC,IAAI,EAAEyD,WAAW;QAAEV,KAAK,EAAE,CAAC;UAAExB,IAAI,EAAE1F,OAAO,CAACoE;QAAQ,CAAC;MAAE,CAAC,CAAC;IAC1E;IACA6C,QAAQ,CAAC/C,IAAI,CAAC;MAAEC,IAAI,EAAE,MAAM;MAAE+C,KAAK,EAAE,CAAC;QAAExB,IAAI,EAAEK;MAAc,CAAC;IAAE,CAAC,CAAC;IACjE,OAAO;MAAEkB;IAAS,CAAC;EACrB;EAEA,MAAMxG,uBAAuBA,CAACpB,MAAM,EAAEC,KAAK,EAAE;IAC3C,MAAMwE,QAAQ,GAAG,IAAI,CAACwC,kBAAkB,CAAChH,KAAK,EAAE,kBAAkB,CAAC;IACnE,IAAI,CAAClB,MAAM,CAACS,IAAI,CAAC,IAAI,IAAI,CAACL,UAAU,qCAAqCsF,QAAQ,EAAE,CAAC;IACpF,MAAMlD,GAAG,GAAG,IAAIgG,GAAG,CAAC9C,QAAQ,CAAC;IAC7BlD,GAAG,CAACiG,YAAY,CAACC,MAAM,CAAC,KAAK,EAAEzH,MAAM,CAAC;IACtC,MAAMmG,iBAAiB,GAAG;MACxByB,QAAQ,EAAE,CAAC;QAAE9C,IAAI,EAAE,MAAM;QAAE+C,KAAK,EAAE,CAAC;UAAExB,IAAI,EAAE;QAAuB,CAAC;MAAE,CAAC,CAAC;MACvE2B,gBAAgB,EAAE;QAAEC,eAAe,EAAE;MAAE;IACzC,CAAC;IACD,OAAO;MACL1G,GAAG,EAAEA,GAAG,CAAC2G,QAAQ,CAAC,CAAC;MACnB1G,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAE8D,IAAI,CAACC,SAAS,CAACU,iBAAiB;IACxC,CAAC;EACH;AACF;AAEArC,MAAM,CAACC,OAAO,GAAGG,gBAAgB;;;;;;;;;;AClKjC,MAAMjF,cAAc,GAAGL,mBAAO,CAAC,0CAAa,CAAC;;AAE7C;AACA;AACA;AACA,MAAMyF,cAAc,SAASpF,cAAc,CAAC;EAC1CC,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,MAAM,CAAC;EACf;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMoB,gBAAgBA,CAACX,MAAM,EAAEmC,MAAM,EAAE9B,MAAM,EAAE;IAC7C,MAAMyE,QAAQ,GAAG,IAAI,CAACpF,MAAM,EAAEoF,QAAQ,IAAI,sCAAsC;IAChF,IAAI,CAAC1F,MAAM,CAACS,IAAI,CAAC,IAAI,IAAI,CAACL,UAAU,qCAAqC2C,MAAM,CAAC7B,KAAK,EAAE,CAAC;IAExF,MAAMyE,cAAc,GAAG;MACrBzE,KAAK,EAAE6B,MAAM,CAAC7B,KAAK;MACnBsD,MAAM,EAAE;IACV,CAAC;IAED,MAAMoB,QAAQ,GAAG,EAAE;IACnB,IAAI7C,MAAM,CAAC8C,YAAY,EAAE;MACvBD,QAAQ,CAACE,IAAI,CAAC;QAAEC,IAAI,EAAE,QAAQ;QAAEC,OAAO,EAAEjD,MAAM,CAAC8C;MAAa,CAAC,CAAC;IACjE;IACA,IAAI9C,MAAM,CAACkD,mBAAmB,IAAIlD,MAAM,CAACkD,mBAAmB,CAACnE,MAAM,GAAG,CAAC,EAAE;MACvE8D,QAAQ,CAACE,IAAI,CAAC,GAAG,IAAI,CAAC2D,mBAAmB,CAAC1G,MAAM,CAACkD,mBAAmB,CAAC,CAAC;IACxE;IACAL,QAAQ,CAACE,IAAI,CAAC;MAAEC,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAEpF;IAAO,CAAC,CAAC,CAAC,CAAC;IAClD+E,cAAc,CAACC,QAAQ,GAAGA,QAAQ;;IAElC;IACAD,cAAc,CAAC5C,MAAM,CAACqD,cAAc,IAAI,YAAY,CAAC,GAAGrD,MAAM,CAACsD,SAAS;IACxE,IAAI,aAAa,IAAItD,MAAM,EAAE;MAC3B4C,cAAc,CAACW,WAAW,GAAGvD,MAAM,CAACuD,WAAW;IACjD;IACA,IAAI,MAAM,IAAIvD,MAAM,EAAE;MACpB4C,cAAc,CAACY,KAAK,GAAGxD,MAAM,CAACyD,IAAI;IACpC;IAEA,OAAO;MACLhE,GAAG,EAAEkD,QAAQ;MACbjD,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,UAAUzB,MAAM;MACnC,CAAC;MACD0B,IAAI,EAAE8D,IAAI,CAACC,SAAS,CAACf,cAAc;IACrC,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE3C,iBAAiBA,CAACC,IAAI,EAAE;IACtB,IAAI,CAACA,IAAI,EAAE;MACT,OAAO;QAAEK,IAAI,EAAE;MAAS,CAAC;IAC3B;;IAEA;IACA,IAAIL,IAAI,KAAK,cAAc,EAAE;MAC3B,OAAO;QAAEK,IAAI,EAAE;MAAO,CAAC;IACzB;IAEA,IAAIL,IAAI,CAAC0D,UAAU,CAAC,QAAQ,CAAC,EAAE;MAC7B,IAAI;QACF,MAAMC,IAAI,GAAGH,IAAI,CAACI,KAAK,CAAC5D,IAAI,CAAC0B,SAAS,CAAC,CAAC,CAAC,CAAC;QAC1C,MAAMqB,OAAO,GAAGY,IAAI,CAACE,OAAO,GAAG,CAAC,CAAC,EAAEC,KAAK,EAAEf,OAAO;QAEjD,IAAIA,OAAO,EAAE;UACX,OAAO;YAAE1C,IAAI,EAAE,SAAS;YAAEK,KAAK,EAAEqC;UAAQ,CAAC;QAC5C,CAAC,MAAM;UACL;UACA,IAAIY,IAAI,CAACE,OAAO,GAAG,CAAC,CAAC,EAAEiB,aAAa,EAAE;YACnC,IAAI,CAAC/H,MAAM,CAACS,IAAI,CAAC,IAAI,IAAI,CAACL,UAAU,kCAAkCwG,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACiB,aAAa,EAAE,CAAC;UACzG;UACA,OAAO;YAAEzE,IAAI,EAAE;UAAS,CAAC;QAC3B;MACF,CAAC,CAAC,OAAO0D,CAAC,EAAE;QACV,IAAI,CAAChH,MAAM,CAAC0B,KAAK,CAAC,IAAI,IAAI,CAACtB,UAAU,+BAA+B,EAAE4G,CAAC,EAAE,OAAO,EAAE/D,IAAI,CAAC;QACvF,OAAO;UAAEK,IAAI,EAAE,OAAO;UAAE5B,KAAK,EAAE,8BAA8BsF,CAAC,CAACpF,OAAO;QAAG,CAAC;MAC5E;IACF;IAEA,OAAO;MAAE0B,IAAI,EAAE;IAAS,CAAC;EAC3B;;EAEA;AACF;AACA;AACA;AACA;EACEmG,mBAAmBA,CAACxC,OAAO,EAAE;IAC3B,OAAOA,OAAO,CAACC,GAAG,CAACC,GAAG,IAAI;MACxB;MACA,IAAIpB,IAAI,GAAG,MAAM;MACjB,IAAIoB,GAAG,CAACpB,IAAI,KAAK,WAAW,EAAEA,IAAI,GAAG,WAAW,CAAC,KAC5C,IAAIoB,GAAG,CAACpB,IAAI,KAAK,QAAQ,EAAEA,IAAI,GAAG,QAAQ;MAE/C,OAAO;QACLA,IAAI;QACJC,OAAO,EAAEmB,GAAG,CAACnB;MACf,CAAC;IACH,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM3D,uBAAuBA,CAACpB,MAAM,EAAEC,KAAK,EAAE;IAC3C,MAAMwE,QAAQ,GAAG,IAAI,CAACpF,MAAM,EAAEoF,QAAQ,IAAI,sCAAsC;IAChF,MAAM0B,iBAAiB,GAAG;MACxBlG,KAAK,EAAEA,KAAK;MACZ0E,QAAQ,EAAE,CACR;QAAEG,IAAI,EAAE,MAAM;QAAEC,OAAO,EAAE;MAAuB,CAAC,CAClD;MACDqB,UAAU,EAAE,CAAC,CAAC;IAChB,CAAC;IAED,OAAO;MACL7E,GAAG,EAAEkD,QAAQ;MACbjD,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,UAAUzB,MAAM;MACnC,CAAC;MACD0B,IAAI,EAAE8D,IAAI,CAACC,SAAS,CAACU,iBAAiB;IACxC,CAAC;EACH;AACF;AAEArC,MAAM,CAACC,OAAO,GAAGM,cAAc;;;;;;;;;;ACpJ/B,MAAMpF,cAAc,GAAGL,mBAAO,CAAC,0CAAa,CAAC;;AAE7C;AACA;AACA;AACA,MAAMuF,iBAAiB,SAASlF,cAAc,CAAC;EAC7CC,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,SAAS,CAAC;EAClB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMoB,gBAAgBA,CAACX,MAAM,EAAEmC,MAAM,EAAE9B,MAAM,EAAE;IAC7C,MAAMyE,QAAQ,GAAG,IAAI,CAACpF,MAAM,EAAEoF,QAAQ,IAAI,4CAA4C;IACtF,IAAI,CAAC1F,MAAM,CAACS,IAAI,CAAC,IAAI,IAAI,CAACL,UAAU,qCAAqC2C,MAAM,CAAC7B,KAAK,EAAE,CAAC;IAExF,MAAMyE,cAAc,GAAG;MACrBzE,KAAK,EAAE6B,MAAM,CAAC7B,KAAK;MACnBsD,MAAM,EAAE;IACV,CAAC;IAED,MAAMoB,QAAQ,GAAG,EAAE;IACnB;IACA;IACA;IACA,IAAI7C,MAAM,CAAC8C,YAAY,EAAE;MACvBD,QAAQ,CAACE,IAAI,CAAC;QAAEC,IAAI,EAAE,QAAQ;QAAEC,OAAO,EAAEjD,MAAM,CAAC8C;MAAa,CAAC,CAAC;IACjE;IACA,IAAI9C,MAAM,CAACkD,mBAAmB,IAAIlD,MAAM,CAACkD,mBAAmB,CAACnE,MAAM,GAAG,CAAC,EAAE;MACvE8D,QAAQ,CAACE,IAAI,CAAC,GAAG,IAAI,CAAC4D,sBAAsB,CAAC3G,MAAM,CAACkD,mBAAmB,CAAC,CAAC;IAC3E;IACAL,QAAQ,CAACE,IAAI,CAAC;MAAEC,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAEpF;IAAO,CAAC,CAAC,CAAC,CAAC;IAClD+E,cAAc,CAACC,QAAQ,GAAGA,QAAQ;;IAElC;IACAD,cAAc,CAAC5C,MAAM,CAACqD,cAAc,IAAI,YAAY,CAAC,GAAGrD,MAAM,CAACsD,SAAS;IACxE,IAAI,aAAa,IAAItD,MAAM,EAAE;MAC3B4C,cAAc,CAACW,WAAW,GAAGvD,MAAM,CAACuD,WAAW;IACjD;IACA,IAAI,MAAM,IAAIvD,MAAM,EAAE;MACpB4C,cAAc,CAACY,KAAK,GAAGxD,MAAM,CAACyD,IAAI;IACpC;IAEA,OAAO;MACLhE,GAAG,EAAEkD,QAAQ;MACbjD,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,UAAUzB,MAAM;MACnC,CAAC;MACD0B,IAAI,EAAE8D,IAAI,CAACC,SAAS,CAACf,cAAc;IACrC,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE3C,iBAAiBA,CAACC,IAAI,EAAE;IACtB,IAAI,CAACA,IAAI,EAAE;MACT,OAAO;QAAEK,IAAI,EAAE;MAAS,CAAC;IAC3B;;IAEA;IACA,IAAIL,IAAI,KAAK,cAAc,EAAE;MAC3B,OAAO;QAAEK,IAAI,EAAE;MAAO,CAAC;IACzB;IAEA,IAAIL,IAAI,CAAC0D,UAAU,CAAC,QAAQ,CAAC,EAAE;MAC7B,IAAI;QACF,MAAMC,IAAI,GAAGH,IAAI,CAACI,KAAK,CAAC5D,IAAI,CAAC0B,SAAS,CAAC,CAAC,CAAC,CAAC;QAC1C,MAAMqB,OAAO,GAAGY,IAAI,CAACE,OAAO,GAAG,CAAC,CAAC,EAAEC,KAAK,EAAEf,OAAO;QAEjD,IAAIA,OAAO,EAAE;UACX,OAAO;YAAE1C,IAAI,EAAE,SAAS;YAAEK,KAAK,EAAEqC;UAAQ,CAAC;QAC5C,CAAC,MAAM;UACL;UACA,IAAIY,IAAI,CAACE,OAAO,GAAG,CAAC,CAAC,EAAEiB,aAAa,EAAE;YACnC,IAAI,CAAC/H,MAAM,CAACS,IAAI,CAAC,IAAI,IAAI,CAACL,UAAU,kCAAkCwG,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACiB,aAAa,EAAE,CAAC;UACzG;UACA,OAAO;YAAEzE,IAAI,EAAE;UAAS,CAAC;QAC3B;MACF,CAAC,CAAC,OAAO0D,CAAC,EAAE;QACV,IAAI,CAAChH,MAAM,CAAC0B,KAAK,CAAC,IAAI,IAAI,CAACtB,UAAU,+BAA+B,EAAE4G,CAAC,EAAE,OAAO,EAAE/D,IAAI,CAAC;QACvF,OAAO;UAAEK,IAAI,EAAE,OAAO;UAAE5B,KAAK,EAAE,8BAA8BsF,CAAC,CAACpF,OAAO;QAAG,CAAC;MAC5E;IACF;IAEA,OAAO;MAAE0B,IAAI,EAAE;IAAS,CAAC;EAC3B;;EAEA;AACF;AACA;AACA;AACA;EACEoG,sBAAsBA,CAACzC,OAAO,EAAE;IAC9B,OAAOA,OAAO,CAACC,GAAG,CAACC,GAAG,IAAI;MACxB;MACA,IAAIpB,IAAI,GAAG,MAAM;MACjB,IAAIoB,GAAG,CAACpB,IAAI,KAAK,WAAW,EAAEA,IAAI,GAAG,WAAW,CAAC,KAC5C,IAAIoB,GAAG,CAACpB,IAAI,KAAK,QAAQ,EAAEA,IAAI,GAAG,QAAQ;MAE/C,OAAO;QACLA,IAAI;QACJC,OAAO,EAAEmB,GAAG,CAACnB;MACf,CAAC;IACH,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM3D,uBAAuBA,CAACpB,MAAM,EAAEC,KAAK,EAAE;IAC3C,MAAMwE,QAAQ,GAAG,IAAI,CAACpF,MAAM,EAAEoF,QAAQ,IAAI,4CAA4C;IACtF,MAAM0B,iBAAiB,GAAG;MACxBlG,KAAK,EAAEA,KAAK;MACZ0E,QAAQ,EAAE,CACR;QAAEG,IAAI,EAAE,MAAM;QAAEC,OAAO,EAAE;MAAuB,CAAC,CAClD;MACDqB,UAAU,EAAE,CAAC,CAAC;IAChB,CAAC;IAED,OAAO;MACL7E,GAAG,EAAEkD,QAAQ;MACbjD,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,UAAUzB,MAAM;MACnC,CAAC;MACD0B,IAAI,EAAE8D,IAAI,CAACC,SAAS,CAACU,iBAAiB;IACxC,CAAC;EACH;AACF;AAEArC,MAAM,CAACC,OAAO,GAAGI,iBAAiB;;;;;;;;;;ACvJlC;AACA,MAAM;EAAEuE;AAAa,CAAC,GAAG9J,mBAAO,CAAC,sDAAqB,CAAC;AACvD,MAAMG,MAAM,GAAGH,kFAAsC;;AAErD;AACA;AACA;AACA,MAAMgK,iBAAiB,CAAC;EACtB1J,WAAWA,CAAA,EAAG;IACZ,IAAI,CAAC2J,WAAW,GAAGH,YAAY,CAACI,eAAe;IAC/C,IAAI,CAAC/J,MAAM,GAAGA,MAAM;EACtB;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMgK,cAAcA,CAAC5J,UAAU,EAAE;IAC/B,IAAI;MACF,IAAI,CAACJ,MAAM,CAACS,IAAI,CAAC,2BAA2BL,UAAU,EAAE,CAAC;MACzD,MAAM6J,MAAM,GAAG,MAAMC,MAAM,CAACC,OAAO,CAACC,KAAK,CAACC,GAAG,CAAC,IAAI,CAACP,WAAW,CAAC;MAC/D,MAAMzJ,WAAW,GAAG4J,MAAM,CAAC,IAAI,CAACH,WAAW,CAAC,IAAI,CAAC,CAAC;MAClD,OAAOzJ,WAAW,CAACD,UAAU,CAAC,IAAI,IAAI;IACxC,CAAC,CAAC,OAAOsB,KAAK,EAAE;MACd,IAAI,CAAC1B,MAAM,CAAC0B,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACzD,OAAO,IAAI;IACb;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,MAAM4I,gBAAgBA,CAAClK,UAAU,EAAEC,WAAW,EAAE;IAC9C,IAAI;MACF,IAAI,CAACL,MAAM,CAACS,IAAI,CAAC,2BAA2BL,UAAU,EAAE,CAAC;MACzD,MAAM6J,MAAM,GAAG,MAAMC,MAAM,CAACC,OAAO,CAACC,KAAK,CAACC,GAAG,CAAC,IAAI,CAACP,WAAW,CAAC;MAC/D,MAAMS,cAAc,GAAGN,MAAM,CAAC,IAAI,CAACH,WAAW,CAAC,IAAI,CAAC,CAAC;;MAErD;MACAS,cAAc,CAACnK,UAAU,CAAC,GAAGC,WAAW;MAExC,MAAM6J,MAAM,CAACC,OAAO,CAACC,KAAK,CAACI,GAAG,CAAC;QAAE,CAAC,IAAI,CAACV,WAAW,GAAGS;MAAe,CAAC,CAAC;MACtE,OAAO,IAAI;IACb,CAAC,CAAC,OAAO7I,KAAK,EAAE;MACd,IAAI,CAAC1B,MAAM,CAAC0B,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACtD,OAAO,KAAK;IACd;EACF;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAM+I,iBAAiBA,CAACrK,UAAU,EAAE;IAClC,IAAI;MACF,IAAI,CAACJ,MAAM,CAACS,IAAI,CAAC,4BAA4BL,UAAU,EAAE,CAAC;MAC1D,MAAM6J,MAAM,GAAG,MAAMC,MAAM,CAACC,OAAO,CAACC,KAAK,CAACC,GAAG,CAAC,IAAI,CAACP,WAAW,CAAC;MAC/D,MAAMS,cAAc,GAAGN,MAAM,CAAC,IAAI,CAACH,WAAW,CAAC,IAAI,CAAC,CAAC;MAErD,IAAIS,cAAc,CAACnK,UAAU,CAAC,EAAE;QAC9B,OAAOmK,cAAc,CAACnK,UAAU,CAAC;QACjC,MAAM8J,MAAM,CAACC,OAAO,CAACC,KAAK,CAACI,GAAG,CAAC;UAAE,CAAC,IAAI,CAACV,WAAW,GAAGS;QAAe,CAAC,CAAC;MACxE;MAEA,OAAO,IAAI;IACb,CAAC,CAAC,OAAO7I,KAAK,EAAE;MACd,IAAI,CAAC1B,MAAM,CAAC0B,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACvD,OAAO,KAAK;IACd;EACF;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMgJ,cAAcA,CAACtK,UAAU,EAAE;IAC/B,MAAMC,WAAW,GAAG,MAAM,IAAI,CAAC2J,cAAc,CAAC5J,UAAU,CAAC;IACzD,OAAO,CAAC,CAACC,WAAW;EACtB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,MAAM0B,mBAAmBA,CAAC3B,UAAU,EAAEC,WAAW,EAAE;IACjD,IAAI;MACF,IAAI,CAACL,MAAM,CAACS,IAAI,CAAC,8BAA8BL,UAAU,EAAE,CAAC;MAE5D,MAAMmF,UAAU,GAAG1F,mBAAO,CAAC,oDAAoB,CAAC;MAChD,MAAM8K,UAAU,GAAGpF,UAAU,CAACC,gBAAgB,CAACpF,UAAU,CAAC;MAE1D,IAAI,CAACuK,UAAU,EAAE;QACf,MAAM,IAAIxJ,KAAK,CAAC,gCAAgCf,UAAU,EAAE,CAAC;MAC/D;MAEA,MAAMuK,UAAU,CAACpK,UAAU,CAACF,WAAW,CAAC;MACxC,MAAM4B,OAAO,GAAG,MAAM0I,UAAU,CAAC5I,mBAAmB,CAAC,CAAC;MAEtD,OAAO;QACLE,OAAO;QACPL,OAAO,EAAEK,OAAO,GAAG,oCAAoC,GAAG;MAC5D,CAAC;IACH,CAAC,CAAC,OAAOP,KAAK,EAAE;MACd,IAAI,CAAC1B,MAAM,CAAC0B,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;MAC7C,OAAO;QACLO,OAAO,EAAE,KAAK;QACdL,OAAO,EAAE,qBAAqBF,KAAK,CAACE,OAAO;MAC7C,CAAC;IACH;EACF;AACF;AAEA,MAAMgJ,iBAAiB,GAAG,IAAIf,iBAAiB,CAAC,CAAC;AACjD9E,MAAM,CAACC,OAAO,GAAG4F,iBAAiB;;;;;;;;;;;;;;;ACzHlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAe9K,sBAAsBA,CAACwC,QAAQ,EAAE;EACrD,IAAIuI,SAAS,GAAG,IAAI;EACpB,IAAIC,YAAY,GAAG,IAAI;EACvB,MAAMC,cAAc,GAAG,cAAczI,QAAQ,CAACO,MAAM,MAAMP,QAAQ,CAAC0I,UAAU,IAAI,eAAe,EAAE;EAElG,IAAI;IACF;IACA,MAAMC,cAAc,GAAG3I,QAAQ,CAAC4I,KAAK,CAAC,CAAC;IACvCL,SAAS,GAAG,MAAMI,cAAc,CAACE,IAAI,CAAC,CAAC;EACzC,CAAC,CAAC,OAAOC,SAAS,EAAE;IAClB;IACAC,OAAO,CAACrJ,IAAI,CAAC,6CAA6C,EAAEoJ,SAAS,CAAC;IACtE,OAAOL,cAAc;EACvB;;EAEA;EACA,IAAIxH,KAAK,CAACC,OAAO,CAACqH,SAAS,CAAC,IAAIA,SAAS,CAAC/I,MAAM,GAAG,CAAC,EAAE;IACpD,MAAMwJ,UAAU,GAAGT,SAAS,CAAC,CAAC,CAAC;IAC/B,IAAIS,UAAU,EAAE5J,KAAK,EAAEE,OAAO,IAAI,OAAO0J,UAAU,CAAC5J,KAAK,CAACE,OAAO,KAAK,QAAQ,EAAE;MAC9EkJ,YAAY,GAAGQ,UAAU,CAAC5J,KAAK,CAACE,OAAO;IACzC;EACF;;EAEA;EACA,IAAI,CAACkJ,YAAY,IAAID,SAAS,IAAI,OAAOA,SAAS,KAAK,QAAQ,EAAE;IAC/D;IACA,IAAI,OAAOA,SAAS,CAACjJ,OAAO,KAAK,QAAQ,EAAE;MACzCkJ,YAAY,GAAGD,SAAS,CAACjJ,OAAO;IAClC,CAAC,MAAM,IAAI,OAAOiJ,SAAS,CAACjJ,OAAO,KAAK,QAAQ,IAAIiJ,SAAS,CAACjJ,OAAO,KAAK,IAAI,EAAE;MAC9E;MACA,IAAI,OAAOiJ,SAAS,CAACjJ,OAAO,CAAC2J,MAAM,KAAK,QAAQ,EAAE;QAChDT,YAAY,GAAGD,SAAS,CAACjJ,OAAO,CAAC2J,MAAM;MACzC,CAAC,MAAM,IAAI,OAAOV,SAAS,CAACjJ,OAAO,CAACF,KAAK,KAAK,QAAQ,EAAE;QACtDoJ,YAAY,GAAGD,SAAS,CAACjJ,OAAO,CAACF,KAAK;MACxC,CAAC,MAAM;QACL;QACAoJ,YAAY,GAAGrE,IAAI,CAACC,SAAS,CAACmE,SAAS,CAACjJ,OAAO,CAAC;MAClD;IACF;;IAEA;IACA,IAAI,CAACkJ,YAAY,IAAID,SAAS,CAACnJ,KAAK,IAAI,OAAOmJ,SAAS,CAACnJ,KAAK,KAAK,QAAQ,IAAI,OAAOmJ,SAAS,CAACnJ,KAAK,CAACE,OAAO,KAAK,QAAQ,EAAE;MAC1HkJ,YAAY,GAAGD,SAAS,CAACnJ,KAAK,CAACE,OAAO;IACxC;IACA;IAAA,KACK,IAAI,CAACkJ,YAAY,IAAID,SAAS,CAACnJ,KAAK,IAAI,OAAOmJ,SAAS,CAACnJ,KAAK,KAAK,QAAQ,EAAE;MAChFoJ,YAAY,GAAGD,SAAS,CAACnJ,KAAK;IAChC;;IAEA;IACA,IAAI,CAACoJ,YAAY,IAAI,OAAOD,SAAS,CAACU,MAAM,KAAK,QAAQ,EAAE;MACzDT,YAAY,GAAGD,SAAS,CAACU,MAAM;IACjC;EACF;;EAEA;EACA,IAAIT,YAAY,EAAE;IAChB;IACA,IAAIA,YAAY,EAAE;MAAEA,YAAY,GAAGA,YAAY,CAACvC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;IAAE;IACvE,OAAO,cAAcjG,QAAQ,CAACO,MAAM,MAAMiI,YAAY,EAAE;EAC1D,CAAC,MAAM;IACL;IACA;IACA,MAAMU,QAAQ,GAAGjI,KAAK,CAACC,OAAO,CAACqH,SAAS,CAAC,GAAG,OAAO,GAAI,OAAOA,SAAU;IACxEQ,OAAO,CAACrJ,IAAI,CAAC,kCAAkCwJ,QAAQ,yCAAyC,EAAEX,SAAS,CAAC;IAC5G,OAAOE,cAAc;EACvB;AACF","sources":["webpack://ai-content-assistant/./src/api/api-base.js","webpack://ai-content-assistant/./src/api/api-factory.js","webpack://ai-content-assistant/./src/api/api-interface.js","webpack://ai-content-assistant/./src/api/implementations/chatgpt-api.js","webpack://ai-content-assistant/./src/api/implementations/claude-api.js","webpack://ai-content-assistant/./src/api/implementations/deepseek-api.js","webpack://ai-content-assistant/./src/api/implementations/gemini-api.js","webpack://ai-content-assistant/./src/api/implementations/grok-api.js","webpack://ai-content-assistant/./src/api/implementations/mistral-api.js","webpack://ai-content-assistant/./src/services/CredentialManager.js","webpack://ai-content-assistant/./src/shared/utils/error-utils.js"],"sourcesContent":["// src/api/api-base.js\nconst ApiInterface = require('./api-interface');\nconst { extractApiErrorMessage } = require('../shared/utils/error-utils');\nconst ConfigService = require('../services/ConfigService');\nconst logger = require('../shared/logger').api;\n\n/**\n * Base class with shared API functionality\n */\nclass BaseApiService extends ApiInterface {\n  constructor(platformId) {\n    super();\n    this.platformId = platformId;\n    // Assign the shared logger directly\n    this.logger = logger;\n    this.credentials = null;\n    this.config = null;\n  }\n\n  async initialize(credentials) {\n    this.credentials = credentials;\n    this.config = await ConfigService.getPlatformApiConfig(this.platformId);\n    // Update log call to include platformId\n    this.logger.info(`[${this.platformId}] API service initialized`);\n  }\n\n  async processRequest(requestConfig) {\n    const { prompt, resolvedParams, formattedContent, onChunk, abortSignal } = requestConfig;\n    const { apiKey } = this.credentials;\n    const model = resolvedParams?.model;\n\n    try {\n      if (!requestConfig || !resolvedParams || !prompt || !onChunk) {\n        throw new Error(`[${this.platformId}] Invalid requestConfig provided to BaseApiService.processRequest`);\n      }\n      if (!apiKey) {\n        throw new Error(`[${this.platformId}] API key not available in BaseApiService`);\n      }\n\n      const structuredPrompt = this._createStructuredPrompt(prompt, formattedContent);\n      // Update log call\n      this.logger.info(`[${this.platformId}] Processing request for model ${model} with${formattedContent ? ' included' : 'out'} content.`);\n      const fetchOptions = await this._buildApiRequest(structuredPrompt, resolvedParams, apiKey);\n      await this._executeStreamingRequest(fetchOptions, onChunk, abortSignal, model);\n\n      // Update log call\n      this.logger.info(`[${this.platformId}] Streaming request for model ${model} completed.`);\n      return { success: true, model: model };\n\n    } catch (error) {\n      // Update log call\n      this.logger.error(`[${this.platformId}] Error in BaseApiService.processRequest for model ${model}:`, error);\n      if (onChunk && typeof onChunk === 'function') {\n        onChunk({\n          done: true,\n          error: `API Request Setup Error: ${error.message}`,\n          model: model || 'unknown'\n        });\n      }\n      return {\n        success: false,\n        error: `API Request Setup Error: ${error.message}`,\n        model: model || 'unknown'\n      };\n    }\n  }\n\n  _createStructuredPrompt(prompt, formattedContent) {\n    if (typeof formattedContent === 'string' && formattedContent.trim().length > 0) {\n      return `# INSTRUCTION\\n${prompt}\\n# EXTRACTED CONTENT\\n${formattedContent}`;\n    } else {\n      return prompt;\n    }\n  }\n\n  async validateCredentials() {\n    try {\n      const { apiKey } = this.credentials;\n      if (!apiKey) {\n        this.logger.warn(`[${this.platformId}] No API key provided for validation`);\n        return false;\n      }\n      const isValid = await this._validateApiKey(apiKey);\n      return isValid;\n    } catch (error) {\n      this.logger.error(`[${this.platformId}] Error validating credentials:`, error);\n      return false;\n    }\n  }\n\n  async _validateApiKey(apiKey) {\n    try {\n      const defaultModel = this.config?.defaultModel;\n      if (!defaultModel) {\n        this.logger.warn(`[${this.platformId}] No default model found in configuration`);\n        return false;\n      }\n      return await this._validateWithModel(apiKey, defaultModel);\n    } catch (error) {\n      this.logger.error(`[${this.platformId}] Error validating API key:`, error);\n      return false;\n    }\n  }\n\n  async _validateWithModel(apiKey, model) {\n    try {\n      this.logger.info(`[${this.platformId}] Attempting API key validation for model ${model}...`);\n      const fetchOptions = await this._buildValidationRequest(apiKey, model);\n      const response = await fetch(fetchOptions.url, {\n        method: fetchOptions.method,\n        headers: fetchOptions.headers,\n        body: fetchOptions.body,\n      });\n\n      if (response.ok) {\n        this.logger.info(`[${this.platformId}] API key validation successful for model ${model} (Status: ${response.status})`);\n        return true;\n      } else {\n        const errorMessage = await extractApiErrorMessage(response);\n        this.logger.warn(`[${this.platformId}] API key validation failed for model ${model} (Status: ${response.status}): ${errorMessage}`);\n        return false;\n      }\n    } catch (error) {\n      this.logger.error(`[${this.platformId}] API key validation error for model ${model}:`, error);\n      return false;\n    }\n  }\n\n  async _buildValidationRequest(apiKey, model) {\n    throw new Error('_buildValidationRequest must be implemented by subclasses');\n  }\n\n  async _buildApiRequest(prompt, params, apiKey) {\n    throw new Error('_buildApiRequest must be implemented by subclasses');\n  }\n\n  _parseStreamChunk(line) {\n    throw new Error('_parseStreamChunk must be implemented by subclasses');\n  }\n\n  _resetStreamState() {\n    // Base implementation does nothing. Subclasses can override.\n  }\n\n  /**\n   * Processes a parsed result from _parseStreamChunk, handling single or multiple chunks.\n   * @param {Object} parsedResult - The result from _parseStreamChunk.\n   * @param {Function} onChunk - The callback to send data to.\n   * @param {string} model - The model being used.\n   * @param {string} accumulatedContent - The current accumulated content string (will be updated).\n   * @returns {string} The updated accumulatedContent.\n   * @private\n   */\n  _handleParsedChunk(parsedResult, onChunk, model, accumulatedContent) {\n    if (parsedResult.type === 'content') {\n      if (Array.isArray(parsedResult.chunks)) {\n        for (const subChunk of parsedResult.chunks) {\n          if (subChunk && subChunk.length > 0) {\n            accumulatedContent += subChunk;\n            onChunk({ chunk: subChunk, done: false, model });\n          }\n        }\n      } else if (parsedResult.chunk) {\n        // Handle single chunk (standard case for other APIs)\n        accumulatedContent += parsedResult.chunk;\n        onChunk({ chunk: parsedResult.chunk, done: false, model });\n      }\n    }\n    return accumulatedContent;\n  }\n\n\n  async _executeStreamingRequest(fetchOptions, onChunk, abortSignal, model) {\n    let reader;\n    let accumulatedContent = \"\";\n    const decoder = new TextDecoder(\"utf-8\");\n    let buffer = \"\"; // Buffer for non-Gemini platforms\n\n    if (typeof this._resetStreamState === 'function') {\n      // Update log call\n      this.logger.info(`[${this.platformId}] Resetting stream state`);\n      this._resetStreamState();\n    }\n\n    try {\n      // Update log call\n      this.logger.info(`[${this.platformId}] Executing streaming request to ${fetchOptions.url} for model ${model}`);\n      const response = await fetch(fetchOptions.url, {\n        method: fetchOptions.method,\n        headers: fetchOptions.headers,\n        body: fetchOptions.body,\n        signal: abortSignal\n      });\n\n      if (!response.ok) {\n        const errorMessage = await extractApiErrorMessage(response);\n        // Update log call\n        this.logger.error(`[${this.platformId}] API Error (${response.status}) for model ${model}: ${errorMessage}`, response);\n        onChunk({ done: true, error: errorMessage, model });\n        throw new Error(`API request failed with status ${response.status}: ${errorMessage}`);\n      }\n      if (!response.body) throw new Error('Response body is null or undefined.');\n\n      reader = response.body.getReader();\n\n      while (true) {\n        const { done, value } = await reader.read();\n\n        if (done) {\n          // Update log call\n          this.logger.info(`[${this.platformId}] Stream finished naturally for model ${model}.`);\n          // Final buffer processing for all platforms\n          if (buffer.trim()) {\n            // Update log call\n            this.logger.warn(`[${this.platformId}] Processing remaining buffer content after stream end for model ${model}: \"${buffer}\"`);\n            try {\n              const parsedResult = this._parseStreamChunk(buffer.trim());\n              accumulatedContent = this._handleParsedChunk(parsedResult, onChunk, model, accumulatedContent);\n              if (parsedResult.type === 'error') {\n                onChunk({ done: true, error: parsedResult.error, model });\n                return false;\n              }\n            } catch (parseError) {\n              // Update log call\n              this.logger.error(`[${this.platformId}] Error parsing final buffer chunk for model ${model}:`, parseError, 'Buffer:', buffer);\n              onChunk({ done: true, error: `Error parsing final stream data: ${parseError.message}`, model });\n              return false;\n            }\n          }\n          onChunk({ chunk: '', done: true, model, fullContent: accumulatedContent });\n          break; // Exit the loop\n        }\n\n        const decodedChunk = decoder.decode(value, { stream: true });\n\n        // Standard SSE handling for all platforms\n        buffer += decodedChunk;\n        let lineEnd;\n        while ((lineEnd = buffer.indexOf('\\n')) !== -1) {\n          const line = buffer.substring(0, lineEnd).trim();\n          buffer = buffer.substring(lineEnd + 1);\n          if (!line) continue;\n\n          try {\n            const parsedResult = this._parseStreamChunk(line);\n            accumulatedContent = this._handleParsedChunk(parsedResult, onChunk, model, accumulatedContent);\n\n            if (parsedResult.type === 'error') {\n              // Update log call\n              this.logger.error(`[${this.platformId}] Parsed stream error for model ${model}: ${parsedResult.error}`);\n              onChunk({ done: true, error: parsedResult.error, model });\n              return false; // Stop processing loop\n            }\n            // Ignore 'done' and 'ignore' types here\n          } catch (parseError) {\n            // Update log call\n            this.logger.error(`[${this.platformId}] Error parsing stream chunk for model ${model}:`, parseError, 'Line:', line);\n            onChunk({ done: true, error: `Error parsing stream data: ${parseError.message}`, model });\n            return false; // Stop processing loop\n          }\n        }\n\n      }\n\n      return true; // Signal successful completion\n\n    } catch (error) {\n      // Handle AbortError specifically\n      if (error.name === 'AbortError') {\n        this.logger.info(`[${this.platformId}] API request cancelled by user (AbortError) for model ${model}.`);\n        // Send a specific 'Cancelled by user' message via onChunk\n        onChunk({ done: true, error: 'Cancelled by user', model });\n        // No need to re-throw AbortError, it's handled.\n      } else {\n        // Handle other errors during fetch or reading\n        this.logger.error(`[${this.platformId}] Unhandled streaming error for model ${model}:`, error);\n        onChunk({ done: true, error: error.message || 'An unknown streaming error occurred', model });\n        // Re-throw other errors to be caught by the outer try/catch in processRequest\n        throw error;\n      }\n      return false; // Indicate handled error (AbortError) or that an error occurred\n    } finally {\n      // Cleanup: Attempt to cancel the reader if it exists.\n      if (reader) {\n        try {\n          // Attempt to cancel the reader. This also releases the lock.\n          await reader.cancel();\n          this.logger.info(`[${this.platformId}] Stream reader cancelled successfully for model ${model}.`);\n        } catch (cancelError) {\n          this.logger.warn(`[${this.platformId}] Error cancelling stream reader for model ${model} (potentially expected after abort):`, cancelError);\n        }\n        // No need for releaseLock() as cancel() handles it.\n      } else {\n        // Update log call\n        this.logger.info(`[${this.platformId}] No active reader found in finally block for model ${model}.`);\n      }\n    }\n  }\n}\n\nmodule.exports = BaseApiService;","// src/api/api-factory.js\n\nconst BaseApiService = require('./api-base');\nconst ChatGptApiService = require('./implementations/chatgpt-api');\nconst ClaudeApiService = require('./implementations/claude-api');\nconst GeminiApiService = require('./implementations/gemini-api');\nconst MistralApiService = require('./implementations/mistral-api');\nconst DeepSeekApiService = require('./implementations/deepseek-api');\nconst GrokApiService = require('./implementations/grok-api');\n\n/**\n * Factory class for creating API service instances\n */\nclass ApiFactory {\n  /**\n   * Create an API service instance for the specified platform\n   * @param {string} platformId - Platform identifier (e.g., 'chatgpt', 'claude')\n   * @returns {BaseApiService} API service instance\n   * @throws {Error} If platform is not supported\n   */\n  static createApiService(platformId) {\n    switch (platformId.toLowerCase()) {\n      case 'chatgpt':\n        return new ChatGptApiService();\n      case 'claude':\n        return new ClaudeApiService();\n      case 'gemini':\n        return new GeminiApiService();\n      case 'mistral':\n        return new MistralApiService();\n      case 'deepseek':\n        return new DeepSeekApiService();\n      case 'grok':\n        return new GrokApiService();\n      default:\n        throw new Error(`Unsupported API platform: ${platformId}`);\n    }\n  }\n}\n\nmodule.exports = ApiFactory;","/**\n * Interface defining contract for all API implementations\n */\nclass ApiInterface {\n  /**\n   * Initialize the API client with credentials\n   * @param {Object} credentials - API credentials\n   * @returns {Promise<void>}\n   */\n  async initialize(credentials) {\n    throw new Error('initialize must be implemented by subclasses');\n  }\n  \n  /**\n   * Process unified API request with complete configuration\n   * @param {Object} requestConfig - Unified request configuration\n   * @param {Object} requestConfig.contentData - Extracted content data\n   * @param {string} requestConfig.prompt - Formatted prompt\n   * @param {string} [requestConfig.model] - Optional model override\n   * @param {Array} [requestConfig.conversationHistory] - Optional conversation history\n   * @param {boolean} [requestConfig.streaming] - Whether to use streaming mode\n   * @param {Function} [requestConfig.onChunk] - Callback for streaming chunks\n   * @param {number} [requestConfig.tabId] - Tab ID for token accounting\n   * @returns {Promise<Object>} Standardized response object\n   */\n  async processRequest(requestConfig) {\n    throw new Error('processRequest must be implemented by subclasses');\n  }\n  \n  /**\n   * Lightweight method to verify API credentials\n   * @returns {Promise<boolean>} Validation result\n   */\n  async validateCredentials() {\n    throw new Error('validateCredentials must be implemented by subclasses');\n  }\n}\n\nmodule.exports = ApiInterface;\n","const BaseApiService = require('../api-base');\n\n/**\n * ChatGPT API implementation\n */\nclass ChatGptApiService extends BaseApiService {\n  constructor() {\n    super('chatgpt');\n  }\n\n  /**\n   * Build the platform-specific API request options for ChatGPT.\n   * @override\n   * @protected\n   * @param {string} prompt - The final structured prompt.\n   * @param {Object} params - Resolved model parameters (model, temp, history, etc.).\n   * @param {string} apiKey - The API key.\n   * @returns {Promise<Object>} Fetch options { url, method, headers, body }.\n   */\n  async _buildApiRequest(prompt, params, apiKey) {\n    const endpoint = this.config?.endpoint || 'https://api.openai.com/v1/chat/completions';\n    this.logger.info(`[${this.platformId}] Building API request for model: ${params.model}`);\n\n    const requestPayload = {\n      model: params.model,\n      stream: true\n    };\n\n    const messages = [];\n    if (params.systemPrompt) {\n      messages.push({ role: 'system', content: params.systemPrompt });\n    }\n    if (params.conversationHistory && params.conversationHistory.length > 0) {\n      messages.push(...this._formatOpenAIMessages(params.conversationHistory));\n    }\n    messages.push({ role: 'user', content: prompt }); // Use the structured prompt\n    requestPayload.messages = messages;\n\n    // Apply model parameters\n    if (params.parameterStyle === 'reasoning') {\n      requestPayload[params.tokenParameter || 'max_completion_tokens'] = params.maxTokens;\n    } else {\n      requestPayload[params.tokenParameter || 'max_tokens'] = params.maxTokens;\n      if ('temperature' in params) {\n        requestPayload.temperature = params.temperature;\n      }\n      if ('topP' in params) {\n        requestPayload.top_p = params.topP;\n      }\n    }\n\n    return {\n      url: endpoint,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${apiKey}`\n      },\n      body: JSON.stringify(requestPayload)\n    };\n  }\n\n  /**\n   * Parse a single line/chunk from the ChatGPT API stream.\n   * @override\n   * @protected\n   * @param {string} line - A single line string from the stream.\n   * @returns {Object} Parsed result: { type: 'content' | 'done' | 'ignore', chunk?: string }.\n   */\n  _parseStreamChunk(line) {\n    if (!line) {\n      return { type: 'ignore' };\n    }\n\n    // OpenAI uses 'data: [DONE]' to signal the end of the stream content\n    if (line === 'data: [DONE]') {\n      return { type: 'done' }; // Signal done, but let the reader confirm stream end\n    }\n\n    if (line.startsWith('data: ')) {\n      try {\n        const data = JSON.parse(line.substring(6));\n        const content = data.choices?.[0]?.delta?.content;\n\n        if (content) {\n          return { type: 'content', chunk: content };\n        } else {\n          // Ignore chunks without content (e.g., role markers, finish_reason)\n          return { type: 'ignore' };\n        }\n      } catch (e) {\n        this.logger.error(`[${this.platformId}] Error parsing stream chunk:`, e, 'Line:', line);\n        // Treat parsing errors as stream errors - return error type\n        return { type: 'error', error: `Error parsing stream data: ${e.message}` };\n      }\n    }\n\n    // Ignore lines that don't start with 'data: ' (e.g., potential comments or empty lines already handled)\n    return { type: 'ignore' };\n  }\n\n  /**\n   * Format conversation history for OpenAI API\n   * @param {Array} history - Conversation history array\n   * @returns {Array} Formatted messages for OpenAI API\n   */\n  _formatOpenAIMessages(history) {\n    return history.map(msg => {\n      // Map internal role names to OpenAI roles\n      let role = 'user';\n      if (msg.role === 'assistant') role = 'assistant';\n      else if (msg.role === 'system') role = 'system';\n\n      return {\n        role,\n        content: msg.content\n      };\n    });\n  }\n\n  /**\n   * Build the platform-specific API request options for validation.\n   * @override\n   * @protected\n   * @param {string} apiKey - The API key to validate.\n   * @param {string} model - The model to use for validation.\n   * @returns {Promise<Object>} Fetch options { url, method, headers, body }.\n   */\n  async _buildValidationRequest(apiKey, model) {\n    const endpoint = this.config?.endpoint || 'https://api.openai.com/v1/chat/completions';\n    const validationPayload = {\n      model: model,\n      messages: [\n        { role: 'user', content: 'API validation check' }\n      ],\n      max_tokens: 1 // Minimum tokens\n    };\n\n    return {\n      url: endpoint,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${apiKey}`\n      },\n      body: JSON.stringify(validationPayload)\n    };\n  }\n}\n\nmodule.exports = ChatGptApiService;","const BaseApiService = require('../api-base');\n\n/**\n * Claude API implementation\n */\nclass ClaudeApiService extends BaseApiService {\n  constructor() {\n    super('claude');\n  }\n\n  /**\n   * Build the platform-specific API request options for Claude.\n   * @override\n   * @protected\n   * @param {string} prompt - The final structured prompt.\n   * @param {Object} params - Resolved model parameters (model, temp, history, etc.).\n   * @param {string} apiKey - The API key.\n   * @returns {Promise<Object>} Fetch options { url, method, headers, body }.\n   */\n  async _buildApiRequest(prompt, params, apiKey) {\n    const endpoint = this.config?.endpoint || 'https://api.anthropic.com/v1/messages';\n    this.logger.info(`[${this.platformId}] Building API request for model: ${params.model}`);\n\n    const requestPayload = {\n      model: params.model,\n      max_tokens: params.maxTokens,\n      messages: [{ role: 'user', content: [{ type: \"text\", text: prompt }] }], // Start with current prompt\n      stream: true\n    };\n\n    // Apply optional parameters\n    if ('temperature' in params) {\n      requestPayload.temperature = params.temperature;\n    }\n    if ('topP' in params) {\n      requestPayload.top_p = params.topP;\n    }\n    if (params.systemPrompt) {\n      requestPayload.system = params.systemPrompt;\n    }\n\n    // Prepend conversation history if available\n    if (params.conversationHistory && params.conversationHistory.length > 0) {\n      // Use the helper to format history and add the current prompt correctly\n      requestPayload.messages = this._formatClaudeMessages(params.conversationHistory, prompt);\n    }\n\n    return {\n      url: endpoint,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-api-key': apiKey,\n        'anthropic-version': '2023-06-01',\n        'anthropic-dangerous-direct-browser-access': 'true' // Required for direct browser calls\n      },\n      body: JSON.stringify(requestPayload)\n    };\n  }\n\n  /**\n   * Parse a single line/chunk from the Claude API stream.\n   * Handles Server-Sent Events (SSE) format used by Claude.\n   * @override\n   * @protected\n   * @param {string} line - A single line string from the stream.\n   * @returns {Object} Parsed result: { type: 'content' | 'error' | 'done' | 'ignore', chunk?: string, error?: string }.\n   */\n  _parseStreamChunk(line) {\n    if (!line) {\n      return { type: 'ignore' };\n    }\n\n    // Claude uses event types\n    if (line.startsWith('event: ')) {\n      const eventType = line.substring(7).trim();\n      // We only care about the data associated with specific events.\n      // 'message_stop' signals completion, but we let the reader handle the actual stream end.\n      // 'ping' can be ignored.\n      if (eventType === 'message_stop') {\n        return { type: 'done' }; // Signal potential end, base class waits for reader\n      }\n      // Other events like 'message_start', 'content_block_start/stop' are ignored for now.\n      return { type: 'ignore' };\n    }\n\n    if (line.startsWith('data: ')) {\n      try {\n        const data = JSON.parse(line.substring(6));\n\n        // Check for content delta\n        if (data.type === 'content_block_delta' && data.delta?.type === 'text_delta') {\n          const content = data.delta.text;\n          return content ? { type: 'content', chunk: content } : { type: 'ignore' };\n        }\n\n        // Check for errors reported within the stream\n        if (data.type === 'error') {\n          const streamErrorMessage = `Stream error: ${data.error?.type} - ${data.error?.message || 'Unknown stream error'}`;\n          this.logger.error(`[${this.platformId}] ${streamErrorMessage}`, data.error);\n          return { type: 'error', error: streamErrorMessage };\n        }\n\n        // Ignore other data types like 'message_delta' (stop_reason is handled by 'message_stop' event or reader end)\n        return { type: 'ignore' };\n\n      } catch (e) {\n        // Update log call\n        this.logger.error(`[${this.platformId}] Error parsing stream chunk:`, e, 'Line:', line);\n        return { type: 'error', error: `Error parsing stream data: ${e.message}` };\n      }\n    }\n\n    // Ignore lines that are not 'event:' or 'data:'\n    return { type: 'ignore' };\n  }\n\n  /**\n   * Format conversation history for Claude API\n   * @param {Array} history - Conversation history array\n   * @param {string} currentPrompt - Current user prompt\n   * @returns {Array} Formatted messages for Claude API\n   */\n  _formatClaudeMessages(history, currentPrompt) {\n    const formattedMessages = [];\n\n    // Process conversation history\n    for (const message of history) {\n      // Map internal role to Claude role\n      const role = message.role === 'assistant' ? 'assistant' : 'user';\n\n      formattedMessages.push({\n        role: role,\n        content: [\n          {\n            type: \"text\",\n            text: message.content\n          }\n        ]\n      });\n    }\n\n    // Add current prompt as the final user message\n    formattedMessages.push({\n      role: 'user',\n      content: [\n        {\n          type: \"text\",\n          text: currentPrompt\n        }\n      ]\n    });\n\n    return formattedMessages;\n  }\n\n  /**\n   * Build the platform-specific API request options for validation.\n   * @override\n   * @protected\n   * @param {string} apiKey - The API key to validate.\n   * @param {string} model - The model to use for validation.\n   * @returns {Promise<Object>} Fetch options { url, method, headers, body }.\n   */\n  async _buildValidationRequest(apiKey, model) {\n    const endpoint = this.config?.endpoint || 'https://api.anthropic.com/v1/messages';\n    const validationPayload = {\n      model: model,\n      max_tokens: 1, // Minimum tokens needed\n      messages: [\n        {\n          role: 'user',\n          content: [\n            {\n              type: \"text\",\n              text: \"API validation check\"\n            }\n          ]\n        }\n      ]\n    };\n\n    return {\n      url: endpoint,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-api-key': apiKey,\n        'anthropic-version': '2023-06-01',\n        'anthropic-dangerous-direct-browser-access': 'true' // Required for direct browser calls\n      },\n      body: JSON.stringify(validationPayload)\n    };\n  }\n}\n\nmodule.exports = ClaudeApiService;","const BaseApiService = require('../api-base');\n\n/**\n * DeepSeek API implementation\n */\nclass DeepSeekApiService extends BaseApiService {\n  constructor() {\n    super('deepseek');\n  }\n\n  /**\n   * Build the platform-specific API request options for DeepSeek.\n   * Handles merging consecutive user messages as required by the API.\n   * @override\n   * @protected\n   * @param {string} prompt - The final structured prompt (current user input).\n   * @param {Object} params - Resolved model parameters (model, temp, history, etc.).\n   * @param {string} apiKey - The API key.\n   * @returns {Promise<Object>} Fetch options { url, method, headers, body }.\n   */\n  async _buildApiRequest(prompt, params, apiKey) {\n    const endpoint = this.config?.endpoint || 'https://api.deepseek.com/v1/chat/completions';\n    this.logger.info(`[${this.platformId}] Building API request for model: ${params.model}`);\n\n    const requestPayload = {\n      model: params.model,\n      stream: true\n    };\n\n    let messages = [];\n    // Add system prompt first if it exists\n    if (params.systemPrompt) {\n      messages.push({ role: 'system', content: params.systemPrompt });\n    }\n\n    // Format history, merging consecutive roles (excluding system)\n    if (params.conversationHistory && params.conversationHistory.length > 0) {\n      messages.push(...this._formatDeepSeekMessages(params.conversationHistory));\n    }\n\n    // Now, handle the current user prompt, merging if necessary\n    const lastMessage = messages.length > 0 ? messages[messages.length - 1] : null;\n\n    if (lastMessage && lastMessage.role === 'user') {\n      // Merge the current prompt into the last user message\n      this.logger.info(`[${this.platformId}] Merging current user prompt with previous user message for DeepSeek compatibility.`);\n      lastMessage.content += `\\n\\n${prompt}`; // Append the new prompt text\n    } else {\n      // Add the current prompt as a new user message\n      messages.push({ role: 'user', content: prompt });\n    }\n\n    // Assign the final message list to the payload\n    requestPayload.messages = messages;\n\n    // Apply other parameters\n    requestPayload[params.tokenParameter || 'max_tokens'] = params.maxTokens;\n    if ('temperature' in params) {\n      requestPayload.temperature = params.temperature;\n    }\n    if ('topP' in params) {\n      requestPayload.top_p = params.topP;\n    }\n\n    return {\n      url: endpoint,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${apiKey}`\n      },\n      body: JSON.stringify(requestPayload)\n    };\n  }\n\n  /**\n   * Parse a single line/chunk from the DeepSeek API stream.\n   * Similar format to OpenAI.\n   * @override\n   * @protected\n   * @param {string} line - A single line string from the stream.\n   * @returns {Object} Parsed result: { type: 'content' | 'done' | 'ignore' | 'error', chunk?: string, error?: string }.\n   */\n  _parseStreamChunk(line) {\n    if (!line) {\n      return { type: 'ignore' };\n    }\n\n    // DeepSeek also uses 'data: [DONE]'\n    if (line === 'data: [DONE]') {\n      return { type: 'done' };\n    }\n\n    if (line.startsWith('data: ')) {\n      try {\n        const data = JSON.parse(line.substring(6));\n        const content = data.choices?.[0]?.delta?.content;\n\n        if (content) {\n          return { type: 'content', chunk: content };\n        } else {\n          // Ignore chunks without content (like finish_reason markers)\n          if (data.choices?.[0]?.finish_reason) {\n             this.logger.info(`[${this.platformId}] Stream finished with reason: ${data.choices[0].finish_reason}`);\n          }\n          return { type: 'ignore' };\n        }\n      } catch (e) {\n        this.logger.error(`[${this.platformId}] Error parsing stream chunk:`, e, 'Line:', line);\n        return { type: 'error', error: `Error parsing stream data: ${e.message}` };\n      }\n    }\n\n    return { type: 'ignore' };\n  }\n\n  /**\n   * Format conversation history for DeepSeek API, merging consecutive messages of the same role.\n   * Skips system messages or unknown roles found within the history.\n   * @param {Array} history - Conversation history array\n   * @returns {Array} Formatted messages for DeepSeek API\n   */\n  _formatDeepSeekMessages(history) {\n    const formattedMessages = [];\n    // Update log call\n    this.logger.info(`[${this.platformId}] Formatting ${history.length} history messages, merging consecutive roles.`);\n\n    for (const msg of history) {\n      let apiRole;\n      // Map internal roles to API roles, skipping system/unknown messages within history\n      if (msg.role === 'user') {\n        apiRole = 'user';\n      } else if (msg.role === 'assistant') {\n        apiRole = 'assistant';\n      } else {\n        this.logger.warn(`[${this.platformId}] Skipping message with role '${msg.role || 'unknown'}' found within conversation history for API call.`);\n        continue; // Skip system or unknown roles\n      }\n\n      const lastMessage = formattedMessages.length > 0 ? formattedMessages[formattedMessages.length - 1] : null;\n\n      // Check if the last message exists and has the same role as the current message\n      if (lastMessage && lastMessage.role === apiRole) {\n        // Merge content with the last message\n        this.logger.info(`[${this.platformId}] Merging consecutive '${apiRole}' message content for compatibility.`);\n        lastMessage.content += `\\n\\n${msg.content}`; // Append content\n      } else {\n        // Add as a new message if roles differ or it's the first message\n        formattedMessages.push({ role: apiRole, content: msg.content });\n      }\n    }\n\n    // Final check for alternation (optional, but good for debugging)\n    for (let i = 0; i < formattedMessages.length - 1; i++) {\n        if (formattedMessages[i].role === formattedMessages[i+1].role) {\n            // Update log call\n            this.logger.error(`[${this.platformId}] Formatting failed: Consecutive roles found after merge at index ${i}. Role: ${formattedMessages[i].role}`);\n            // Handle error case if needed, e.g., return only valid prefix\n        }\n    }\n\n    this.logger.info(`[${this.platformId}] Formatted history contains ${formattedMessages.length} messages after merging.`);\n    return formattedMessages;\n  }\n\n  /**\n   * Build the platform-specific API request options for validation.\n   * @override\n   * @protected\n   * @param {string} apiKey - The API key to validate.\n   * @param {string} model - The model to use for validation.\n   * @returns {Promise<Object>} Fetch options { url, method, headers, body }.\n   */\n  async _buildValidationRequest(apiKey, model) {\n    const endpoint = this.config?.endpoint || 'https://api.deepseek.com/v1/chat/completions';\n    const validationPayload = {\n      model: model,\n      messages: [\n        { role: 'user', content: 'API validation check' }\n      ],\n      max_tokens: 1 // Minimum tokens needed\n    };\n\n    return {\n      url: endpoint,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${apiKey}`\n      },\n      body: JSON.stringify(validationPayload)\n    };\n  }\n}\n\nmodule.exports = DeepSeekApiService;","// src/api/implementations/gemini-api.js\nconst BaseApiService = require('../api-base');\n\n/**\n * Gemini API implementation\n */\nclass GeminiApiService extends BaseApiService {\n  constructor() {\n    super('gemini');\n  }\n\n  _getGeminiEndpoint(model, method) {\n    const baseTemplate = \"https://generativelanguage.googleapis.com/{version}/models/{model}{method}\";\n    if (!model || !method) {\n      throw new Error(\"Model and method are required to build Gemini endpoint.\");\n    }\n    const isExperimental = model.includes('-exp-');\n    const apiVersion = isExperimental ? 'v1beta' : 'v1';\n    this.logger.info(`[${this.platformId}] Using API version '${apiVersion}' for model '${model}'`);\n    return baseTemplate\n      .replace('{version}', apiVersion)\n      .replace('{model}', model)\n      .replace('{method}', method);\n  }\n\n  async _buildApiRequest(prompt, params, apiKey) {\n    const endpoint = this._getGeminiEndpoint(params.model, ':streamGenerateContent');\n    this.logger.info(`[${this.platformId}] Building API request to: ${endpoint}`);\n    const url = new URL(endpoint);\n    url.searchParams.append('alt', 'sse');\n    url.searchParams.append('key', apiKey);\n\n    let formattedRequest;\n    if (params.conversationHistory && params.conversationHistory.length > 0) {\n      formattedRequest = this._formatGeminiRequestWithHistory(params.conversationHistory, prompt);\n    } else {\n      formattedRequest = { contents: [{ role: 'user', parts: [{ text: prompt }] }] };\n    }\n\n    if (params.systemPrompt) {\n      if (params.modelSupportsSystemPrompt === true) {\n        this.logger.info(`[${this.platformId}] Adding system prompt using systemInstruction for model: ${params.model}.`);\n        formattedRequest.systemInstruction = { parts: [{ text: params.systemPrompt }] };\n      } else {\n        this.logger.warn(`[${this.platformId}] System prompts via systemInstruction are not supported by the selected model: ${params.model}. The provided system prompt will be IGNORED.`);\n      }\n    }\n\n    formattedRequest.generationConfig = {};\n    if (params.tokenParameter) {\n      formattedRequest.generationConfig[params.tokenParameter] = params.maxTokens;\n    } else {\n      formattedRequest.generationConfig.maxOutputTokens = params.maxTokens;\n    }\n    if ('temperature' in params) {\n      formattedRequest.generationConfig.temperature = params.temperature;\n    }\n    if ('topP' in params) {\n      formattedRequest.generationConfig.topP = params.topP;\n    }\n\n    return {\n      url: url.toString(),\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(formattedRequest)\n    };\n  }\n\n  /**\n   * Parse a single line/chunk from the Gemini API stream.\n   * Handles potentially fragmented JSON objects/arrays within the stream.\n   * If a complete JSON structure is an array, iterates through its elements.\n   * Extracts the text from each part as an individual chunk.\n   * @override\n   * @protected\n   * @param {string} line - A single line string chunk received from the base class stream loop, OR an empty string to process the internal buffer.\n   * @returns {Object} Parsed result: { type: 'content', chunks: string[] } | { type: 'error', error: string } | { type: 'ignore' }.\n   *                   Returns 'ignore' if the buffer doesn't contain a complete JSON object yet.\n   */\n  _parseStreamChunk(line) {\n    if (!line || !line.startsWith('data: ')) {\n      // Ignore empty lines or lines not starting with 'data: '\n      // Also handles potential 'event:' lines if Gemini SSE uses them.\n      // Check for potential [DONE] signal if Gemini SSE uses it.\n      if (line === 'data: [DONE]') {\n         // Update log call\n         this.logger.info(`[${this.platformId}] SSE stream signal [DONE] received.`);\n         return { type: 'done' };\n      }\n      return { type: 'ignore' };\n    }\n\n    // Extract the JSON string part after 'data: '\n    const jsonString = line.substring(5).trim(); // Get content after 'data: '\n\n    if (!jsonString) {\n      return { type: 'ignore' }; // Ignore if data part is empty\n    }\n\n    try {\n      const data = JSON.parse(jsonString);\n\n      // Extract text content - assuming the same structure as the previous JSON stream\n      // Check candidates -> content -> parts -> text\n      const textChunk = data?.candidates?.[0]?.content?.parts?.[0]?.text;\n\n      if (textChunk && typeof textChunk === 'string') {\n        // Return the extracted text chunk\n        return { type: 'content', chunk: textChunk };\n      } else {\n        // If structure is valid but no text found, or if error field exists\n        if (data?.error) {\n            const errorMessage = data.error.message || JSON.stringify(data.error);\n            this.logger.error(`[${this.platformId}] SSE stream returned an error: ${errorMessage}`, data.error);\n            return { type: 'error', error: `API Error in stream: ${errorMessage}` };\n        }\n        // Log other valid structures without text for debugging\n        if (data?.candidates?.[0]?.finishReason) {\n            this.logger.info(`[${this.platformId}] SSE stream finished with reason: ${data.candidates[0].finishReason}`);\n            // We might treat specific finish reasons differently later if needed.\n            // For now, ignore finish reason markers unless they contain an error.\n        } else {\n            this.logger.warn(`[${this.platformId}] Parsed SSE data, but no text chunk found or structure mismatch.`, data);\n        }\n        return { type: 'ignore' }; // Ignore chunks without usable text content\n      }\n    } catch (parseError) {\n      this.logger.error(`[${this.platformId}] Error parsing SSE JSON chunk:`, parseError, 'Raw JSON String:', jsonString);\n      // Return error type on JSON parsing failure\n      return { type: 'error', error: `Error parsing stream data: ${parseError.message}` };\n    }\n  }\n\n  _formatGeminiRequestWithHistory(history, currentPrompt) {\n    const contents = [];\n    for (const message of history) {\n      const messageRole = message.role === 'assistant' ? 'model' : 'user';\n      contents.push({ role: messageRole, parts: [{ text: message.content }] });\n    }\n    contents.push({ role: 'user', parts: [{ text: currentPrompt }] });\n    return { contents };\n  }\n\n  async _buildValidationRequest(apiKey, model) {\n    const endpoint = this._getGeminiEndpoint(model, ':generateContent');\n    this.logger.info(`[${this.platformId}] Building validation request to: ${endpoint}`);\n    const url = new URL(endpoint);\n    url.searchParams.append('key', apiKey);\n    const validationPayload = {\n      contents: [{ role: 'user', parts: [{ text: \"API validation check\" }] }],\n      generationConfig: { maxOutputTokens: 1 }\n    };\n    return {\n      url: url.toString(),\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(validationPayload)\n    };\n  }\n}\n\nmodule.exports = GeminiApiService;","const BaseApiService = require('../api-base');\n\n/**\n * Grok API implementation\n */\nclass GrokApiService extends BaseApiService {\n  constructor() {\n    super('grok');\n  }\n\n  /**\n   * Build the platform-specific API request options for Grok.\n   * @override\n   * @protected\n   * @param {string} prompt - The final structured prompt.\n   * @param {Object} params - Resolved model parameters (model, temp, history, etc.).\n   * @param {string} apiKey - The API key.\n   * @returns {Promise<Object>} Fetch options { url, method, headers, body }.\n   */\n  async _buildApiRequest(prompt, params, apiKey) {\n    const endpoint = this.config?.endpoint || 'https://api.x.ai/v1/chat/completions';\n    this.logger.info(`[${this.platformId}] Building API request for model: ${params.model}`);\n\n    const requestPayload = {\n      model: params.model,\n      stream: true\n    };\n\n    const messages = [];\n    if (params.systemPrompt) {\n      messages.push({ role: 'system', content: params.systemPrompt });\n    }\n    if (params.conversationHistory && params.conversationHistory.length > 0) {\n      messages.push(...this._formatGrokMessages(params.conversationHistory));\n    }\n    messages.push({ role: 'user', content: prompt }); // Use the structured prompt\n    requestPayload.messages = messages;\n\n    // Apply model parameters\n    requestPayload[params.tokenParameter || 'max_tokens'] = params.maxTokens;\n    if ('temperature' in params) {\n      requestPayload.temperature = params.temperature;\n    }\n    if ('topP' in params) {\n      requestPayload.top_p = params.topP;\n    }\n\n    return {\n      url: endpoint,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${apiKey}`\n      },\n      body: JSON.stringify(requestPayload)\n    };\n  }\n\n  /**\n   * Parse a single line/chunk from the Grok API stream.\n   * Assumes OpenAI-compatible SSE format.\n   * @override\n   * @protected\n   * @param {string} line - A single line string from the stream.\n   * @returns {Object} Parsed result: { type: 'content' | 'done' | 'ignore' | 'error', chunk?: string, error?: string }.\n   */\n  _parseStreamChunk(line) {\n    if (!line) {\n      return { type: 'ignore' };\n    }\n\n    // Grok uses 'data: [DONE]' like OpenAI\n    if (line === 'data: [DONE]') {\n      return { type: 'done' };\n    }\n\n    if (line.startsWith('data: ')) {\n      try {\n        const data = JSON.parse(line.substring(6));\n        const content = data.choices?.[0]?.delta?.content;\n\n        if (content) {\n          return { type: 'content', chunk: content };\n        } else {\n          // Ignore chunks without content (like finish_reason markers)\n          if (data.choices?.[0]?.finish_reason) {\n             this.logger.info(`[${this.platformId}] Stream finished with reason: ${data.choices[0].finish_reason}`);\n          }\n          return { type: 'ignore' };\n        }\n      } catch (e) {\n        this.logger.error(`[${this.platformId}] Error parsing stream chunk:`, e, 'Line:', line);\n        return { type: 'error', error: `Error parsing stream data: ${e.message}` };\n      }\n    }\n\n    return { type: 'ignore' };\n  }\n\n  /**\n   * Format conversation history for Grok API\n   * @param {Array} history - Conversation history array\n   * @returns {Array} Formatted messages for Grok API\n   */\n  _formatGrokMessages(history) {\n    return history.map(msg => {\n      // Map internal role names to Grok roles (same as OpenAI format)\n      let role = 'user';\n      if (msg.role === 'assistant') role = 'assistant';\n      else if (msg.role === 'system') role = 'system';\n\n      return {\n        role,\n        content: msg.content\n      };\n    });\n  }\n\n  /**\n   * Build the platform-specific API request options for validation.\n   * @override\n   * @protected\n   * @param {string} apiKey - The API key to validate.\n   * @param {string} model - The model to use for validation.\n   * @returns {Promise<Object>} Fetch options { url, method, headers, body }.\n   */\n  async _buildValidationRequest(apiKey, model) {\n    const endpoint = this.config?.endpoint || 'https://api.x.ai/v1/chat/completions';\n    const validationPayload = {\n      model: model,\n      messages: [\n        { role: 'user', content: 'API validation check' }\n      ],\n      max_tokens: 1 // Minimum tokens needed\n    };\n\n    return {\n      url: endpoint,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${apiKey}`\n      },\n      body: JSON.stringify(validationPayload)\n    };\n  }\n}\n\nmodule.exports = GrokApiService;","const BaseApiService = require('../api-base');\n\n/**\n * Mistral API implementation\n */\nclass MistralApiService extends BaseApiService {\n  constructor() {\n    super('mistral');\n  }\n\n  /**\n   * Build the platform-specific API request options for Mistral.\n   * @override\n   * @protected\n   * @param {string} prompt - The final structured prompt.\n   * @param {Object} params - Resolved model parameters (model, temp, history, etc.).\n   * @param {string} apiKey - The API key.\n   * @returns {Promise<Object>} Fetch options { url, method, headers, body }.\n   */\n  async _buildApiRequest(prompt, params, apiKey) {\n    const endpoint = this.config?.endpoint || 'https://api.mistral.ai/v1/chat/completions';\n    this.logger.info(`[${this.platformId}] Building API request for model: ${params.model}`);\n\n    const requestPayload = {\n      model: params.model,\n      stream: true\n    };\n\n    const messages = [];\n    // Mistral API generally prefers alternating user/assistant roles.\n    // System prompt is handled differently or sometimes prepended to the first user message.\n    // For simplicity and compatibility with OpenAI format, we'll include it if provided.\n    if (params.systemPrompt) {\n      messages.push({ role: 'system', content: params.systemPrompt });\n    }\n    if (params.conversationHistory && params.conversationHistory.length > 0) {\n      messages.push(...this._formatMistralMessages(params.conversationHistory));\n    }\n    messages.push({ role: 'user', content: prompt }); // Use the structured prompt\n    requestPayload.messages = messages;\n\n    // Apply model parameters\n    requestPayload[params.tokenParameter || 'max_tokens'] = params.maxTokens;\n    if ('temperature' in params) {\n      requestPayload.temperature = params.temperature;\n    }\n    if ('topP' in params) {\n      requestPayload.top_p = params.topP;\n    }\n\n    return {\n      url: endpoint,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${apiKey}`\n      },\n      body: JSON.stringify(requestPayload)\n    };\n  }\n\n  /**\n   * Parse a single line/chunk from the Mistral API stream.\n   * Assumes OpenAI-compatible SSE format.\n   * @override\n   * @protected\n   * @param {string} line - A single line string from the stream.\n   * @returns {Object} Parsed result: { type: 'content' | 'done' | 'ignore' | 'error', chunk?: string, error?: string }.\n   */\n  _parseStreamChunk(line) {\n    if (!line) {\n      return { type: 'ignore' };\n    }\n\n    // Mistral uses 'data: [DONE]' like OpenAI\n    if (line === 'data: [DONE]') {\n      return { type: 'done' };\n    }\n\n    if (line.startsWith('data: ')) {\n      try {\n        const data = JSON.parse(line.substring(6));\n        const content = data.choices?.[0]?.delta?.content;\n\n        if (content) {\n          return { type: 'content', chunk: content };\n        } else {\n          // Ignore chunks without content (like finish_reason markers)\n          if (data.choices?.[0]?.finish_reason) {\n             this.logger.info(`[${this.platformId}] Stream finished with reason: ${data.choices[0].finish_reason}`);\n          }\n          return { type: 'ignore' };\n        }\n      } catch (e) {\n        this.logger.error(`[${this.platformId}] Error parsing stream chunk:`, e, 'Line:', line);\n        return { type: 'error', error: `Error parsing stream data: ${e.message}` };\n      }\n    }\n\n    return { type: 'ignore' };\n  }\n\n  /**\n   * Format conversation history for Mistral API\n   * @param {Array} history - Conversation history array\n   * @returns {Array} Formatted messages for Mistral API\n   */\n  _formatMistralMessages(history) {\n    return history.map(msg => {\n      // Map internal role names to Mistral roles (same as OpenAI format)\n      let role = 'user';\n      if (msg.role === 'assistant') role = 'assistant';\n      else if (msg.role === 'system') role = 'system';\n\n      return {\n        role,\n        content: msg.content\n      };\n    });\n  }\n\n  /**\n   * Build the platform-specific API request options for validation.\n   * @override\n   * @protected\n   * @param {string} apiKey - The API key to validate.\n   * @param {string} model - The model to use for validation.\n   * @returns {Promise<Object>} Fetch options { url, method, headers, body }.\n   */\n  async _buildValidationRequest(apiKey, model) {\n    const endpoint = this.config?.endpoint || 'https://api.mistral.ai/v1/chat/completions';\n    const validationPayload = {\n      model: model,\n      messages: [\n        { role: 'user', content: 'API validation check' }\n      ],\n      max_tokens: 1 // Minimum tokens needed\n    };\n\n    return {\n      url: endpoint,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${apiKey}`\n      },\n      body: JSON.stringify(validationPayload)\n    };\n  }\n}\n\nmodule.exports = MistralApiService;","// src/services/CredentialManager.js\nconst { STORAGE_KEYS } = require('../shared/constants');\nconst logger = require('../shared/logger.js').service;\n\n/**\n * Service for secure API credential management\n */\nclass CredentialManager {\n  constructor() {\n    this.STORAGE_KEY = STORAGE_KEYS.API_CREDENTIALS;\n    this.logger = logger;\n  }\n  \n  /**\n   * Get stored credentials for a platform\n   * @param {string} platformId - Platform identifier\n   * @returns {Promise<Object|null>} Credentials or null if not found\n   */\n  async getCredentials(platformId) {\n    try {\n      this.logger.info(`Getting credentials for ${platformId}`);\n      const result = await chrome.storage.local.get(this.STORAGE_KEY);\n      const credentials = result[this.STORAGE_KEY] || {};\n      return credentials[platformId] || null;\n    } catch (error) {\n      this.logger.error('Error retrieving credentials:', error);\n      return null;\n    }\n  }\n  \n  /**\n   * Store credentials for a platform\n   * @param {string} platformId - Platform identifier\n   * @param {Object} credentials - Platform credentials (apiKey, etc.)\n   * @returns {Promise<boolean>} Success indicator\n   */\n  async storeCredentials(platformId, credentials) {\n    try {\n      this.logger.info(`Storing credentials for ${platformId}`);\n      const result = await chrome.storage.local.get(this.STORAGE_KEY);\n      const allCredentials = result[this.STORAGE_KEY] || {};\n      \n      // Update credentials for this platform\n      allCredentials[platformId] = credentials;\n      \n      await chrome.storage.local.set({ [this.STORAGE_KEY]: allCredentials });\n      return true;\n    } catch (error) {\n      this.logger.error('Error storing credentials:', error);\n      return false;\n    }\n  }\n  \n  /**\n   * Remove credentials for a platform\n   * @param {string} platformId - Platform identifier\n   * @returns {Promise<boolean>} Success indicator\n   */\n  async removeCredentials(platformId) {\n    try {\n      this.logger.info(`Removing credentials for ${platformId}`);\n      const result = await chrome.storage.local.get(this.STORAGE_KEY);\n      const allCredentials = result[this.STORAGE_KEY] || {};\n      \n      if (allCredentials[platformId]) {\n        delete allCredentials[platformId];\n        await chrome.storage.local.set({ [this.STORAGE_KEY]: allCredentials });\n      }\n      \n      return true;\n    } catch (error) {\n      this.logger.error('Error removing credentials:', error);\n      return false;\n    }\n  }\n  \n  /**\n   * Check if credentials exist for a platform\n   * @param {string} platformId - Platform identifier\n   * @returns {Promise<boolean>} True if credentials exist\n   */\n  async hasCredentials(platformId) {\n    const credentials = await this.getCredentials(platformId);\n    return !!credentials;\n  }\n  \n  /**\n   * Validate credentials for a platform by making a test API call\n   * @param {string} platformId - Platform identifier\n   * @param {Object} credentials - Credentials to validate\n   * @returns {Promise<{isValid: boolean, message: string}>} Validation result\n   */\n  async validateCredentials(platformId, credentials) {\n    try {\n      this.logger.info(`Validating credentials for ${platformId}`);\n      \n      const ApiFactory = require('../api/api-factory');\n      const apiService = ApiFactory.createApiService(platformId);\n      \n      if (!apiService) {\n        throw new Error(`No API service available for ${platformId}`);\n      }\n      \n      await apiService.initialize(credentials);\n      const isValid = await apiService.validateCredentials();\n      \n      return {\n        isValid,\n        message: isValid ? 'Credentials validated successfully' : 'Invalid credentials'\n      };\n    } catch (error) {\n      this.logger.error('Validation error:', error);\n      return {\n        isValid: false,\n        message: `Validation error: ${error.message}`\n      };\n    }\n  }\n}\n\nconst credentialManager = new CredentialManager();\nmodule.exports = credentialManager;","/**\n * Extracts a user-friendly error message from an API response object.\n * Attempts to parse the JSON body and find specific error details.\n * Falls back to a default message based on status code and text.\n *\n * @param {Response} response - The Fetch API Response object.\n * @returns {Promise<string>} A promise that resolves to the formatted error message string.\n */\nexport async function extractApiErrorMessage(response) {\n  let errorData = null;\n  let detailString = null;\n  const defaultMessage = `API error (${response.status}): ${response.statusText || 'Unknown error'}`;\n\n  try {\n    // Clone the response before reading the body, as it can only be read once\n    const clonedResponse = response.clone();\n    errorData = await clonedResponse.json();\n  } catch (jsonError) {\n    // Ignore JSON parsing errors, we'll use the default message\n    console.warn('Failed to parse API error response as JSON:', jsonError);\n    return defaultMessage;\n  }\n\n  // Check for array structure first (e.g., some Gemini errors)\n  if (Array.isArray(errorData) && errorData.length > 0) {\n    const firstError = errorData[0];\n    if (firstError?.error?.message && typeof firstError.error.message === 'string') {\n      detailString = firstError.error.message;\n    }\n  }\n\n  // If not found in array or errorData is not an array, check object structure\n  if (!detailString && errorData && typeof errorData === 'object') {\n    // 1. Check errorData.message\n    if (typeof errorData.message === 'string') {\n      detailString = errorData.message;\n    } else if (typeof errorData.message === 'object' && errorData.message !== null) {\n      // Handle nested message objects (e.g., Mistral's { message: { detail: '...' } })\n      if (typeof errorData.message.detail === 'string') {\n        detailString = errorData.message.detail;\n      } else if (typeof errorData.message.error === 'string') {\n        detailString = errorData.message.error;\n      } else {\n        // Fallback for unexpected object structure in message\n        detailString = JSON.stringify(errorData.message);\n      }\n    }\n\n    // 2. Check errorData.error.message (if message wasn't useful)\n    if (!detailString && errorData.error && typeof errorData.error === 'object' && typeof errorData.error.message === 'string') {\n      detailString = errorData.error.message;\n    }\n    // Check if errorData.error is the string itself\n    else if (!detailString && errorData.error && typeof errorData.error === 'string') {\n      detailString = errorData.error;\n    }\n\n    // 3. Check errorData.detail (string)\n    if (!detailString && typeof errorData.detail === 'string') {\n      detailString = errorData.detail;\n    }\n  }\n\n  // If we found a specific detail, clean it and format the message\n  if (detailString) {\n    // Clean up common prefixes like '* '\n    if (detailString) { detailString = detailString.replace(/^\\*\\s*/, ''); }\n    return `API error (${response.status}): ${detailString}`;\n  } else {\n    // If we couldn't extract a specific string, log for debugging\n    // but return the default message to avoid large objects in UI.\n    const dataType = Array.isArray(errorData) ? 'array' : (typeof errorData);\n    console.warn(`API error data received (type: ${dataType}), but no specific message field found:`, errorData);\n    return defaultMessage;\n  }\n}\n"],"names":["ApiInterface","require","extractApiErrorMessage","ConfigService","logger","api","BaseApiService","constructor","platformId","credentials","config","initialize","getPlatformApiConfig","info","processRequest","requestConfig","prompt","resolvedParams","formattedContent","onChunk","abortSignal","apiKey","model","Error","structuredPrompt","_createStructuredPrompt","fetchOptions","_buildApiRequest","_executeStreamingRequest","success","error","done","message","trim","length","validateCredentials","warn","isValid","_validateApiKey","defaultModel","_validateWithModel","_buildValidationRequest","response","fetch","url","method","headers","body","ok","status","errorMessage","params","_parseStreamChunk","line","_resetStreamState","_handleParsedChunk","parsedResult","accumulatedContent","type","Array","isArray","chunks","subChunk","chunk","reader","decoder","TextDecoder","buffer","signal","getReader","value","read","parseError","fullContent","decodedChunk","decode","stream","lineEnd","indexOf","substring","name","cancel","cancelError","module","exports","ChatGptApiService","ClaudeApiService","GeminiApiService","MistralApiService","DeepSeekApiService","GrokApiService","ApiFactory","createApiService","toLowerCase","endpoint","requestPayload","messages","systemPrompt","push","role","content","conversationHistory","_formatOpenAIMessages","parameterStyle","tokenParameter","maxTokens","temperature","top_p","topP","JSON","stringify","startsWith","data","parse","choices","delta","e","history","map","msg","validationPayload","max_tokens","text","system","_formatClaudeMessages","eventType","streamErrorMessage","currentPrompt","formattedMessages","_formatDeepSeekMessages","lastMessage","finish_reason","apiRole","i","_getGeminiEndpoint","baseTemplate","isExperimental","includes","apiVersion","replace","URL","searchParams","append","formattedRequest","_formatGeminiRequestWithHistory","contents","parts","modelSupportsSystemPrompt","systemInstruction","generationConfig","maxOutputTokens","toString","jsonString","textChunk","candidates","finishReason","messageRole","_formatGrokMessages","_formatMistralMessages","STORAGE_KEYS","service","CredentialManager","STORAGE_KEY","API_CREDENTIALS","getCredentials","result","chrome","storage","local","get","storeCredentials","allCredentials","set","removeCredentials","hasCredentials","apiService","credentialManager","errorData","detailString","defaultMessage","statusText","clonedResponse","clone","json","jsonError","console","firstError","detail","dataType"],"sourceRoot":""}